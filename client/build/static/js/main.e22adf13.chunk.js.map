{"version":3,"sources":["components/api.js","components/GloablContext.jsx","components/Login.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","location","href","api","getconversations","userid","a","point","axios","post","result","data","getmessages","conversation_id","authenticate","username","password","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","name","user","setuser","userdata","setTimeout","Provider","value","Authenticate","Login","useContext","onchange","e","target","id","onsubmit","preventDefault","className","action","onSubmit","onChange","type","placeholder","required","socket_endpoint","ChatContext","ChatContextProvider","openedconversation","setOpenedconversation","conversations","setconversations","conversation_sockets","setconversation_sockets","convos","markUndread","useEffect","CONVERSATION_SOCKET_CONNECTION","Array","isArray","length","map","conversation","socket","io","on","message","connectToConversationSockets","markRead","getSocket","filter","conversation_socket","updateConversations","Messages","messages","setmessages","list","document","querySelector","scrollTop","scrollHeight","removeAllListeners","sendmessage","trim","emit","sender","sender_id","date","Date","messageInput","focus","i","key","text","sender_name","group","onKeyDown","shiftKey","keyCode","onClick","src","alt","Message","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","Object","keys","conversation_name","join","Menu","logo","ConversationList","Conversation","indicator","unread","style","borderRight","Options","ChatPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.e22adf13.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nconst endpoint = window.location.href === \"http://localhost:3000/\"\n    ? \"http://localhost:8000/api\"\n    : window.location.href+'api';\n\nconst api = {\n\n    getconversations: async (userid) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            userid\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id\n        });\n\n        return result.data;\n    },\n    authenticate: async (username, password) => {\n\n        const result = await axios.post(endpoint + \"/authenticate\", {\n            username,\n            password,\n        });\n        return result.data;\n    }\n}\n\nexport default api;","import React, { createContext, useState } from \"react\";\nimport api from \"./api\";\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ userid: 0, name: \"\" });\n\n  async function Authenticate(username, password) {\n    const userdata = await api.authenticate(username, password);\n    if (userdata) {\n      setuser({ userid: userdata, name: username });\n      setTimeout(() => setAuthentication(true));\n    } else {\n      setAuthentication(false);\n    }\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\n\n// contexts\nimport { GlobalContext } from \"./GloablContext\";\n\n//styles\nimport \"./scss/Login.css\";\nconst Login = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  let username = \"\",\n    password = \"\";\n\n  onchange = (e) => {\n    if (e.target.id === \"username\") username = e.target.value;\n    if (e.target.id === \"password\") password = e.target.value;\n  };\n\n  onsubmit = async (e) => {\n    e.preventDefault();\n    Authenticate(username,password);\n  };\n  return (\n    <div className=\"login-page\">\n      <form action=\"post\" onSubmit={onsubmit}>\n        <div className=\"username\">\n          <input\n            onChange={onchange}\n            id=\"username\"\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            required\n          />\n        </div>\n        <div className=\"password\">\n          <input\n            onChange={onchange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div>\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\n\n\nexport default Login;\n","import React, { useEffect, createContext, useContext, useState } from \"react\";\n\nimport api from \"./api\";\nimport io from \"socket.io-client\";\n\n//global context\nimport { GlobalContext } from \"./GloablContext\";\n\nconst socket_endpoint =\n  window.location.href === \"http://localhost:3000/\"\n    ? \"http://localhost:8000/\"\n    : window.location.href;\n\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n  const [conversation_sockets, setconversation_sockets] = useState();\n\n  function connectToConversationSockets(conversations) {\n    if (\n      !window.CONVERSATION_SOCKET_CONNECTION &&\n      Array.isArray(conversations) &&\n      conversations.length\n    ) {\n      const conversation_sockets = conversations.map((conversation) => {\n        const socket = io(\n          `${socket_endpoint}conversation-${conversation.conversation_id}`\n        );\n\n        socket.on(\"message\", (message) => {\n          if (openedconversation.conversation_id !== message.conversation_id)\n            markUndread(message.conversation_id);\n        });\n\n        return { id: conversation.conversation_id, socket };\n      });\n\n      window.CONVERSATION_SOCKET_CONNECTION = true;\n      return conversation_sockets;\n    }\n  }\n\n  useEffect(() => {\n                    const conversation_sockets = connectToConversationSockets(\n                      conversations\n                    );\n                    if (conversation_sockets) {\n                      setconversation_sockets(conversation_sockets);\n                    }\n                    // eslint-disable-next-line\n                  }, [conversations]);\n\n  function getSocket(conversation_id) {\n    return conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n  }\n\n  async function updateConversations() {\n    const convos = await api.getconversations(user.userid);\n    setconversations(convos);\n  }\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation.conversation_id &&\n          conversation_id !== openedconversation.conversation_id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation.conversation_id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        markRead,\n        user,\n        getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\n\nimport { ChatContext } from \"./ChatContext\";\nconst MessagingWindow = () => {\n  const { openedconversation ,user} = useContext(ChatContext);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector(\".chat-screen\");\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\">\n            <h4>\n              {\"me and \" +\n                openedconversation.conversation_name\n                  .filter((name) => name !== user.name)\n                  .join(\",\")}\n            </h4>\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const {\n    getmessages,\n    openedconversation,\n    getSocket,\n    user,\n    markUndread,\n  } = useContext(ChatContext);\n\n  const socket = getSocket(openedconversation.conversation_id)[0].socket;\n  const [messages, setmessages] = useState();\n\n  useEffect(() => {\n    (async () => {\n      setmessages(await getmessages(openedconversation.conversation_id));\n      const list = document.querySelector(\".chat-screen\");\n      list.scrollTop = list.scrollHeight;\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    socket.removeAllListeners(\"message\");\n    socket.on(\"message\", async (message) => {\n      if (message.conversation_id === openedconversation.conversation_id) {\n        setmessages(await getmessages(openedconversation.conversation_id));\n        const list = document.querySelector(\".chat-screen\");\n        list.scrollTop = list.scrollHeight;\n\n      }\n      \n        markUndread(message.conversation_id);\n    });\n\n    return () => {\n      socket.removeAllListeners(\"message\");\n      socket.on(\"message\", (message) => {\n\n        markUndread(message.conversation_id);\n        \n      });\n    };\n  }, [getmessages, openedconversation, socket, markUndread]);\n\n  let message = \"\";\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    \n    message = (message.trim());\n    socket.emit(\"message\", {\n      message,\n      sender: user.name,\n      sender_id: user.userid,\n      conversation_id: openedconversation.conversation_id,\n      date: new Date(),\n    });\n    const messageInput = document.querySelector(\".message-input textarea\");\n    setTimeout(() => (messageInput.value = \"\"));\n    messageInput.focus();\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {messages &&\n          messages.map((message, i) => {\n          \n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n              />\n            );\n          })}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== \"\") {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = \"message\",\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === \"message\") {\n\n    return (\n      <div\n        className={group ? \"message group-message\" : \"message\"}\n        id={user.userid === sender_id ? \"sent-message\" : \"message\"}\n      >\n        <h1 id={group ? \"group-sender\" : \"\"}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === \"badge\") {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  var strTime = hours + \":\" + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useEffect, useContext } from \"react\";\n\nimport MessagingWindow from \"./MessagingWindow\";\n//context\nimport { ChatContext, ChatContextProvider } from \"./ChatContext\";\n// Assets\nimport logo from \"./assets/img/logo.png\";\n\n// style\nimport \"./scss/chat-page.css\";\nimport { GlobalContext } from \"./GloablContext\";\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  return (\n    <div className=\"menu\">\n      <header>\n        <img src={logo} alt=\"logo\" />\n        <h2>Chat</h2>\n      </header>\n\n      <ConversationList />\n      <Options />\n    </div>\n  );\n};\n\nconst ConversationList = () => {\n  const { conversations, updateConversations } = useContext(ChatContext);\n\n  useEffect(() => {\n    updateConversations();\n    // eslint-disable-next-line\n  }, []);\n\n  if (conversations) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation, markRead } = useContext(\n    ChatContext\n  );\n\n  const indicator =\n    conversation.unread &&\n    !(conversation.conversation_id === openedconversation.conversation_id)\n      ? \"7px solid rgb(143, 255, 143)\"\n      : \"\";\n\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: false });\n        }}\n        className=\"conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? \"opened-conversation\"\n            : \"\"\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>\n            {conversation.conversation_name.filter(\n              (name) => name !== user.name\n            )}\n          </h4>\n        </div>\n      </div>\n    );\n  } else {\n    let conversation_name = \"group\";\n    if (typeof conversation.conversation_name === \"string\") {\n      conversation_name = conversation.conversation_name.join(\",\");\n    }\n    conversation_name = conversation.conversation_name.join(\", \");\n    return (\n      <div\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? \"opened-conversation\"\n            : \"\"\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst Options = () => {\n  return (\n    <div className=\"menu-options\">\n      <div className=\"option\">\n        <img\n          src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n          alt=\"\"\n        />\n        <span>start chat</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\n\n// components\nimport Login from \"./Login\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext } from \"./GloablContext\";\nconst App = () => {\n  const { authentication } = useContext(GlobalContext);\n  return authentication ? <ChatPage /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//global context\nimport { GlobalContextProvider } from './components/GloablContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}