{"version":3,"sources":["components/api.js","api-endpoint.js","components/GloablContext.jsx","components/Login.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","API_ENDPOINT","api","getconversations","userid","a","point","axios","post","result","data","getmessages","conversation_id","authenticate","console","log","Number","search","user","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","name","setuser","username","password","userdata","localStorage","setItem","setTimeout","Provider","value","Authenticate","Login","useContext","useEffect","getItem","onchange","e","target","id","onsubmit","preventDefault","className","action","onSubmit","onChange","type","placeholder","required","socket_endpoint","location","href","ChatContext","ChatContextProvider","openedconversation","setOpenedconversation","conversations","setconversations","conversation_sockets","setconversation_sockets","convos","markUndread","CONVERSATION_SOCKET_CONNECTION","Array","isArray","length","map","conversation","socket","io","on","message","connectToConversationSockets","markRead","getSocket","filter","conversation_socket","updateConversations","Messages","messages","setmessages","list","document","querySelector","scrollTop","scrollHeight","removeAllListeners","sendmessage","trim","emit","sender","sender_id","date","Date","messageInput","focus","i","key","text","sender_name","group","onKeyDown","shiftKey","keyCode","onClick","src","alt","Message","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","changegroupname","setchangegroupname","Object","keys","ChangeName","groupname","setgroupname","inputfield","addEventListener","dismiss","removeEventListener","conversation_name","join","newname","Menu","logo","ConversationList","Conversation","indicator","unread","style","borderRight","Options","AddConversationDialog","sugesstions","setsugesstions","participants","setparticipants","participant","first_name","suggestion","newlist","mobile","removeparticipant","autoComplete","exists","forEach","addparticipant","ChatPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.445e8958.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport getendpoint from '../api-endpoint'\n\n\nconst endpoint = `${getendpoint()}api`;\n\nconst api = {\n\n    getconversations: async (userid) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            userid\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id\n        });\n\n        return result.data;\n    },\n    authenticate: async (data) => {\n        console.log(endpoint + \"/authenticate\")\n\n        const result = await axios.post(endpoint + \"/authenticate\", {\n            [Number(data) ? 'mobile' : 'email']: data\n        });\n\n        return result.data;\n    },\n\n    search: async (user) => {\n        const point = endpoint + '/search';\n\n        const result = await axios.post(point, {\n            user\n        });\n\n        return result.data;\n    },\n\n}\n\nexport default api;","export default function endpoint() {\n    window.API_ENDPOINT = 'http://localhost:8000/';\n    return window.API_ENDPOINT;\n}","import React, { createContext, useState } from 'react';\nimport api from './api';\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ userid: 0, name: '' });\n\n  async function Authenticate(username, password) {\n    const userdata = await api.authenticate(username, password);\n    if (userdata) {\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n      setuser({ userid: userdata, name: username });\n      setTimeout(() => setAuthentication(true));\n    } else {\n      setAuthentication(false);\n    }\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\n\n// contexts\nimport { GlobalContext } from './GloablContext';\n\n//styles\n\nimport './scss/Login.css';\nconst Login = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  let username = '';\n\n  useEffect(() => {\n    const username = localStorage.getItem('username');\n\n    if (username) {\n      Authenticate(username);\n    }\n  });\n\n  onchange = (e) => {\n    if (e.target.id === 'username') username = e.target.value;\n  };\n\n  onsubmit = async (e) => {\n    e.preventDefault();\n    Authenticate(username);\n  };\n  return (\n    <div className=\"login-page\">\n      <form action=\"post\" onSubmit={onsubmit}>\n        <div className=\"username\">\n          <input\n            onChange={onchange}\n            id=\"username\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n          />\n        </div>\n        {/* <div className=\"password\">\n          <input\n            onChange={onchange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div> */}\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useEffect, createContext, useContext, useState } from \"react\";\n\nimport api from \"./api\";\nimport io from \"socket.io-client\";\n\n//global context\nimport { GlobalContext } from \"./GloablContext\";\n\nconst socket_endpoint =\n  window.location.href === \"http://localhost:3000/\"\n    ? \"http://localhost:8000/\"\n    : window.location.href;\n\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n  const [conversation_sockets, setconversation_sockets] = useState();\n\n  function connectToConversationSockets(conversations) {\n    if (\n      !window.CONVERSATION_SOCKET_CONNECTION &&\n      Array.isArray(conversations) &&\n      conversations.length\n    ) {\n      const conversation_sockets = conversations.map((conversation) => {\n        const socket = io(\n          `${socket_endpoint}conversation-${conversation.conversation_id}`\n        );\n\n        socket.on(\"message\", (message) => {\n          if (openedconversation.conversation_id !== message.conversation_id)\n            markUndread(message.conversation_id);\n        });\n\n        return { id: conversation.conversation_id, socket };\n      });\n\n      window.CONVERSATION_SOCKET_CONNECTION = true;\n      return conversation_sockets;\n    }\n  }\n\n  useEffect(() => {\n                    const conversation_sockets = connectToConversationSockets(\n                      conversations\n                    );\n                    if (conversation_sockets) {\n                      setconversation_sockets(conversation_sockets);\n                    }\n                    // eslint-disable-next-line\n                  }, [conversations]);\n\n  function getSocket(conversation_id) {\n    return conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n  }\n\n  async function updateConversations() {\n    const convos = await api.getconversations(user.userid);\n    setconversations(convos);\n  }\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation.conversation_id &&\n          conversation_id !== openedconversation.conversation_id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation.conversation_id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        markRead,\n        user,\n        getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport { ChatContext } from './ChatContext';\nconst MessagingWindow = () => {\n  const { openedconversation, user } = useContext(ChatContext);\n  const [changegroupname, setchangegroupname] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    function ChangeName({ groupname, setgroupname, setchangegroupname }) {\n      let newname = '';\n\n      const onchange = (e) => {\n        newname = e.target.value;\n      };\n      useEffect(() => {\n        const inputfield = document.querySelector('#group-name-changer');\n        inputfield.focus();\n        inputfield.addEventListener('focusout', () => {\n          setchangegroupname(false);\n        });\n\n        const dismiss = (e) => {\n          if (e.keyCode === 27) setchangegroupname(false);\n        };\n\n        document.addEventListener('keydown', dismiss);\n\n        return () => {\n          document.removeEventListener('keydown', dismiss);\n        };\n      });\n\n      return (\n        <form onSubmit={setgroupname} className=\"group-name-input\">\n          <input\n            onChange={onchange}\n            id=\"group-name-changer\"\n            type=\"text\"\n            value={groupname}\n          />\n        </form>\n      );\n    }\n\n    const conversation_name = `me and ${openedconversation.conversation_name\n      .filter((name) => name !== user.name)\n      .join(',')}`;\n\n    const setconversation_name = (newname) => {};\n\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\" onClick={() => setchangegroupname(true)}>\n            {!changegroupname ? (\n              <h4>{conversation_name}</h4>\n            ) : (\n              <ChangeName\n                groupname={conversation_name}\n                setgroupname={setconversation_name}\n                {...{ setchangegroupname }}\n              />\n            )}\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const {\n    getmessages,\n    openedconversation,\n    getSocket,\n    user,\n    markUndread,\n  } = useContext(ChatContext);\n\n  const socket = getSocket(openedconversation.conversation_id)[0].socket;\n  const [messages, setmessages] = useState();\n\n  useEffect(() => {\n    (async () => {\n      setmessages(await getmessages(openedconversation.conversation_id));\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    socket.removeAllListeners('message');\n    socket.on('message', async (message) => {\n      if (message.conversation_id === openedconversation.conversation_id) {\n        setmessages(await getmessages(openedconversation.conversation_id));\n        const list = document.querySelector('.chat-screen');\n        list.scrollTop = list.scrollHeight;\n      }\n\n      markUndread(message.conversation_id);\n    });\n\n    return () => {\n      socket.removeAllListeners('message');\n      socket.on('message', (message) => {\n        markUndread(message.conversation_id);\n      });\n    };\n  }, [getmessages, openedconversation, socket, markUndread]);\n\n  let message = '';\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    message = message.trim();\n    socket.emit('message', {\n      message,\n      sender: user.name,\n      sender_id: user.userid,\n      conversation_id: openedconversation.conversation_id,\n      date: new Date(),\n    });\n    const messageInput = document.querySelector('.message-input textarea');\n    setTimeout(() => (messageInput.value = ''));\n    messageInput.focus();\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {messages &&\n          messages.map((message, i) => {\n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n              />\n            );\n          })}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== '') {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = 'message',\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === 'message') {\n    return (\n      <div\n        className={group ? 'message group-message' : 'message'}\n        id={user.userid === sender_id ? 'sent-message' : 'message'}\n      >\n        <h1 id={group ? 'group-sender' : ''}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === 'badge') {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var strTime = hours + ':' + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport MessagingWindow from './MessagingWindow';\n//context\nimport { ChatContext, ChatContextProvider } from './ChatContext';\n// Assets\nimport logo from './assets/img/logo.png';\n\n// style\nimport './scss/chat-page.css';\nimport { GlobalContext } from './GloablContext';\n\nimport api from './api';\n\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  return (\n    <>\n      <div className=\"menu\">\n        <header>\n          <img src={logo} alt=\"logo\" />\n          <h2>Chat</h2>\n        </header>\n\n        <ConversationList />\n        <Options />\n      </div>\n      <AddConversationDialog />\n    </>\n  );\n};\n\nconst ConversationList = () => {\n  const { conversations, updateConversations } = useContext(ChatContext);\n\n  useEffect(() => {\n    updateConversations();\n    // eslint-disable-next-line\n  }, []);\n\n  if (conversations) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation, markRead } = useContext(\n    ChatContext\n  );\n\n  const indicator =\n    conversation.unread &&\n    !(conversation.conversation_id === openedconversation.conversation_id)\n      ? '7px solid rgb(143, 255, 143)'\n      : '';\n\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: false });\n        }}\n        className=\"conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>\n            {conversation.conversation_name.filter(\n              (name) => name !== user.name\n            )}\n          </h4>\n        </div>\n      </div>\n    );\n  } else {\n    let conversation_name = 'group';\n    if (typeof conversation.conversation_name === 'string') {\n      conversation_name = conversation.conversation_name;\n    }\n    conversation_name = conversation.conversation_name.join(', ');\n\n    return (\n      <div\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst Options = () => {\n  return (\n    <>\n      <div className=\"menu-options\">\n        <div className=\"option\">\n          <img\n            src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n            alt=\"\"\n          />\n          <span>start chat</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst AddConversationDialog = () => {\n  const [sugesstions, setsugesstions] = useState();\n  const [participants, setparticipants] = useState();\n\n  useEffect(() => {\n    document.querySelector('#conversation-adder').focus();\n  });\n\n  const onchange = async (e) => {\n    console.log('testttt');\n\n    if (e.target.value !== '') {\n      setsugesstions(await api.search(e.target.value));\n    } else {\n      setsugesstions([]);\n    }\n  };\n\n  const addparticipant = (suggestion) => {\n    console.log(participants);\n    let exists = false;\n    participants &&\n      participants.forEach((participant) => {\n        if (participant.mobile === suggestion.mobile) exists = true;\n      });\n\n    if (!exists) {\n      setparticipants([...(participants || []), suggestion]);\n    }\n  };\n\n  const removeparticipant = (suggestion) => {\n    let newlist =\n      participants &&\n      participants.filter((participant) => {\n        if (participant.mobile === suggestion.mobile) return false;\n        return true;\n      });\n    console.log(newlist);\n    setparticipants(newlist);\n  };\n\n  return (\n    <div className=\"conversation-add\">\n      <form>\n        <div className=\"users-input\">\n          <h2>Create</h2>\n          {participants && participants.length !== 0 && (\n            <div className=\"participants\">\n              {participants.map((participant, i) => (\n                <div key={i} className=\"participant\">\n                  <span>{participant.first_name}</span>\n                  <img\n                    onClick={() => {\n                      removeparticipant(participant);\n                    }}\n                    src=\"https://img.icons8.com/pastel-glyph/64/000000/cancel.png\"\n                    alt=\"cancel\"\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n          <input\n            onChange={onchange}\n            id=\"conversation-adder\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n            autoComplete=\"off\"\n          />\n\n          {sugesstions && sugesstions.length !== 0 && (\n            <div className=\"suggestions\">\n              {sugesstions.map((suggestion, i) => (\n                <div\n                  key={i}\n                  onClick={() => addparticipant(suggestion)}\n                  className=\"suggestion\"\n                >\n                  <h4>{suggestion.first_name}</h4>\n                  <p>{suggestion.mobile}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        <button type=\"submit\">Start</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\n\n// components\nimport Login from \"./Login\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext } from \"./GloablContext\";\n\n\nconst App = () => {\n  \n  const { authentication } = useContext(GlobalContext);\n  return authentication ? <ChatPage /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//global context\nimport { GlobalContextProvider } from './components/GloablContext';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}