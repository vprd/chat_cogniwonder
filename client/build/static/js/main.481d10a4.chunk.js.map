{"version":3,"sources":["api-endpoint.js","components/api.js","components/GloablContext.jsx","components/Login.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","location","origin","API_ENDPOINT","getendpoint","api","getconversations","userid","a","point","axios","post","result","data","getmessages","conversation_id","page","authenticate","console","log","Number","search","user","startconversation","ids","creator","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","name","setuser","email_pwd","localStorage","setItem","mobile","email","first_name","last_name","id","setTimeout","Provider","value","Authenticate","Login","useContext","username","useEffect","split","onchange","e","target","onsubmit","preventDefault","className","action","onSubmit","onChange","type","placeholder","required","socket_endpoint","SOCKET_SETUP","ChatContext","ChatContextProvider","openedconversation","setOpenedconversation","conversations","setconversations","participants","length","map","parti","updateConversations","useCallback","convos","socket","io","on","notification","event","removeAllListeners","disconnect","markUndread","markRead","Messages","useRef","transport","current","messages","setmessages","setPage","count","setCount","scrollToBottom","main_message_container","document","querySelector","scrollTop","scrollHeight","focus","messagesobj","message","message_container","style","display","loading_messages","setLoading_messages","onscroll","addEventListener","removeEventListener","sendmessage","messageObject","trim","sender","sender_id","date","Date","delivering","emit","messageInput","i","key","text","sender_name","group","delevering","onKeyDown","shiftKey","keyCode","onClick","src","alt","Message","message_classname","background","opacity","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","changegroupname","setchangegroupname","Object","keys","ChangeName","groupname","setgroupname","newname","inputRef","inputfield","dismiss","ref","conversation_name","Array","isArray","filter","join","Menu","addconversationview","setaddconversationview","scrollIntoView","logo","Options","ConversationList","conversation","Conversation","onclick","conversation_opened","JSON","stringify","opened_conversation","parse","getItem","indicator","unread","borderRight","AddConversationDialog","sugesstions","setsugesstions","setparticipants","addparticipant","suggestion","exists","forEach","participant","input","conversationadd","enteradd","s","u","start","newlist","removeparticipant","autoComplete","ChatPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.481d10a4.chunk.js","sourcesContent":["\n\nexport default function endpoint() {\n\n        const endpoint = [\n                'http://localhost:8000/',\n                'https://chat.cogniwonder.com/',\n                'https://cogniwonder.herokuapp.com/'\n        ];\n\n        switch (window.location.origin) {\n                case 'http://localhost:3000':\n                        window.API_ENDPOINT = endpoint[0];\n                        return window.API_ENDPOINT;\n\n                default:\n                        window.API_ENDPOINT = window.location.origin + '/';\n                        return window.API_ENDPOINT;\n        }\n\n        /* window.API_ENDPOINT = 'http://localhost:8000/';\n        return window.API_ENDPOINT; */\n\n        /* window.API_ENDPOINT = 'https://chat.cogniwonder.com/';\n        return window.API_ENDPOINT; */\n\n        /* window.API_ENDPOINT = 'https://cogniwonder.herokuapp.com/';\n        return window.API_ENDPOINT; */\n\n}","import axios from 'axios';\n\nimport getendpoint from '../api-endpoint'\n\n\nconst endpoint = `${getendpoint()}api`;\n\nconst api = {\n\n    getconversations: async (userid) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            userid\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id, page) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id, page\n        });\n\n        return result.data;\n    },\n    authenticate: async (data) => {\n        console.log(endpoint + \"/authenticate\")\n\n        const result = await axios.post(endpoint + \"/authenticate\", {\n            [Number(data) ? 'mobile' : 'email']: data\n        });\n\n        return result.data;\n    },\n\n    search: async (user) => {\n        const point = endpoint + '/search';\n\n        const result = await axios.post(point, {\n            user\n        });\n\n        return result.data;\n    },\n    startconversation: async (ids, creator) => {\n        const point = endpoint + '/startconversation';\n\n        const result = await axios.post(point, {\n            ids, creator\n        });\n\n        return result.data;\n    },\n\n}\n\nexport default api;","import React, { createContext, useState } from 'react';\nimport api from './api';\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ userid: 0, name: '' });\n  \n  async function Authenticate(email_pwd) {\n    const user = await api.authenticate(email_pwd);\n    if (user) {\n      localStorage.setItem('email_pwd', email_pwd);\n\n      setuser({\n        mobile: user.mobile,\n        email: user.email,\n        first_name: user.first_name,\n        last_name: user.last_name,\n        id: user.id,\n      });\n      setTimeout(() => setAuthentication(true));\n    } else {\n      setAuthentication(false);\n    }\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\n\n// contexts\nimport { GlobalContext } from './GloablContext';\n\n//styles\n\nimport './scss/Login.css';\nconst Login = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  let username = '';\n\n  useEffect(() => {\n    if (window.location.search) {\n      try {\n        let username = window.location.search.split('?')[1];\n        Authenticate(username);\n      } catch {}\n    }\n\n    /* const username = localStorage.getItem('email_pwd');\n    if (username) {\n      Authenticate(username);\n    } */\n    // eslint-disable-next-line\n  }, []);\n\n  onchange = (e) => {\n    if (e.target.id === 'username') username = e.target.value;\n  };\n\n  onsubmit = async (e) => {\n    e.preventDefault();\n    Authenticate(username);\n  };\n  return (\n    <div className=\"login-page\">\n      <form action=\"post\" onSubmit={onsubmit}>\n        <div className=\"username\">\n          <input\n            onChange={onchange}\n            id=\"username\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n          />\n        </div>\n        {/* <div className=\"password\">\n          <input\n            onChange={onchange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div> */}\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, {\n  useRef,\n  useEffect,\n  createContext,\n  useContext,\n  useState,\n  useMemo,\n} from 'react';\n\nimport api from './api';\nimport io from 'socket.io-client';\n\n//global context\nimport { GlobalContext } from './GloablContext';\n\nimport getendpoint from '../api-endpoint';\nimport { useCallback } from 'react';\n\nconst endpoint = `${getendpoint()}`;\n\nconst socket_endpoint = endpoint;\nwindow.SOCKET_SETUP = 0;\n/* mainsocket.on('debug', (message) => {\n  console.log('debugger:',message);\n}); */\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n\n  /* const sockets = useMemo(\n    function () {\n      if (\n        Array.isArray(conversations) &&\n        conversations.length &&\n        window.SOCKET_SETUP !== conversations.length\n      ) {\n        console.log('starting listeners');\n        const newconversation_sockets = conversations.map((conversation) => {\n          const socket = io(\n            `${socket_endpoint}conversation${conversation.conversation_id}`\n          );\n\n          socket.on('connect', () => {\n            console.log('socket.io connected');\n          });\n\n          window.SOCKET_SETUP = conversations.length;\n          return { id: conversation.conversation_id, socket };\n        });\n        return newconversation_sockets.sort();\n      }\n    },\n    [conversations]\n  ); */\n  // const conversation_sockets_reference = useRef(sockets);\n  // const conversation_sockets = conversation_sockets_reference.current;\n  /* useEffect(() => {\n    connectToConversationSockets();\n  }, [conversations]); */\n  /* const render_counter = useRef(0);\n  console.log(render_counter.current++); */\n  async function startconversation(participants) {\n    if (participants && participants.length) {\n      const ids = [...participants, user].map((parti) => parti.id);\n      await api.startconversation(ids, user.id);\n\n      // await updateConversations();\n    }\n  }\n  const updateConversations = useCallback(\n    async function updateConversations() {\n      const convos = await api.getconversations(user.id);\n      setconversations(convos);\n    },\n    [user.id]\n  );\n  useEffect(() => {\n    if (user.id) {\n      const socket = io(`${socket_endpoint}notification${user.id}`);\n\n      socket.on('connect', () =>\n        console.log('connected to notification channel')\n      );\n\n      socket.on('notification', async (notification) => {\n        if (notification.event === 'newconversation') {\n          console.log('added to new convo');\n          await updateConversations();\n        }\n      });\n\n      return () => {\n        socket.removeAllListeners();\n        socket.disconnect();\n      };\n    }\n  }, [user, updateConversations]);\n\n  /* function getSocket(conversation_id) {\n    const result = conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n    console.log('sockets', result);\n    return result;\n  } */\n\n  useEffect(() => {\n    updateConversations();\n  }, [updateConversations]);\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation.conversation_id &&\n          conversation_id !== openedconversation.conversation_id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation.conversation_id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        startconversation,\n        markRead,\n        user,\n        // getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import React, { useRef, useState, useEffect, useContext } from 'react';\n\nimport { ChatContext } from './ChatContext';\n\nimport getendpoint from '../api-endpoint';\nimport io from 'socket.io-client';\n\nconst endpoint = `${getendpoint()}`;\nconst socket_endpoint = endpoint;\n\nconst MessagingWindow = () => {\n  const { openedconversation, user } = useContext(ChatContext);\n  const [changegroupname, setchangegroupname] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector('.chat-screen');\n      // list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    function ChangeName({ groupname, setgroupname, setchangegroupname }) {\n      let newname = '';\n      const inputRef = useRef();\n      const onchange = () => {\n        newname = inputRef.current.value;\n        console.log(newname);\n      };\n      useEffect(() => {\n        // const inputfield = document.querySelector('#group-name-changer');\n        const inputfield = inputRef.current;\n        inputfield.value = groupname;\n        inputfield.focus();\n\n        const dismiss = (e) => {\n          if (e.keyCode === 27) setchangegroupname(false);\n        };\n\n        document.addEventListener('keydown', dismiss);\n\n        return () => {\n          document.removeEventListener('keydown', dismiss);\n        };\n      });\n\n      return (\n        <form onSubmit={setgroupname} className=\"group-name-input\">\n          <input\n            ref={inputRef}\n            onChange={onchange}\n            id=\"group-name-changer\"\n            type=\"text\"\n          />\n        </form>\n      );\n    }\n\n    let conversation_name = openedconversation.conversation_name;\n\n    if (Array.isArray(conversation_name)) {\n      conversation_name = conversation_name\n        .filter((name) => name !== user.first_name)\n        .join(', ');\n    }\n\n    const setconversation_name = (newname) => {};\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\" onClick={() => setchangegroupname(true)}>\n            {!changegroupname ? (\n              <h4>{conversation_name}</h4>\n            ) : (\n              <ChangeName\n                groupname={conversation_name}\n                setgroupname={setconversation_name}\n                {...{ setchangegroupname }}\n              />\n            )}\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const { getmessages, openedconversation, user } = useContext(ChatContext);\n\n  let socketRef = useRef(\n    io(`${socket_endpoint}conversation${openedconversation.conversation_id}`, {\n      transport: ['websocket'],\n    })\n  );\n  const socket = socketRef.current;\n\n  const [messages, setmessages] = useState([]);\n  const [page, setPage] = useState(0);\n  const [count, setCount] = useState(0);\n\n  function scrollToBottom() {\n    const main_message_container = document.querySelector(\n      '.messages-container'\n    );\n    main_message_container.scrollTop = main_message_container.scrollHeight;\n  }\n  useEffect(() => {\n    const messageInput = document.querySelector('.message-input textarea');\n    messageInput.focus();\n  });\n\n  useEffect(() => {\n    setPage(0);\n  }, []);\n  useEffect(() => {\n    (async () => {\n      const messagesobj = await getmessages(openedconversation.conversation_id);\n      setmessages(messagesobj.messages);\n      setPage(messagesobj.page);\n      setCount(messagesobj.count);\n      scrollToBottom();\n\n      return () => {\n        setmessages([]);\n      };\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    socket.on('message', async (message) => {\n      if (message.conversation_id === openedconversation.conversation_id) {\n        setmessages(\n          (await getmessages(openedconversation.conversation_id)).messages\n        );\n        scrollToBottom();\n      }\n    });\n\n    return () => {\n      socket.removeAllListeners('message');\n    };\n  }, [getmessages, openedconversation, socket]);\n\n  useEffect(() => {\n    const message_container = document.querySelector('.messages-view');\n\n    message_container.style.display = '';\n\n    return () => {\n      message_container.style.display = 'none';\n    };\n  }, [messages]);\n\n  const [loading_messages, setLoading_messages] = useState(false);\n  useEffect(() => {\n    const main_message_container = document.querySelector(\n      '.messages-container'\n    );\n\n    const onscroll = async (e) => {\n      if (!e.target.scrollTop && !loading_messages && messages.length < count) {\n        console.log('top', page + 1);\n        setLoading_messages(true);\n        const messagesobj = await getmessages(\n          openedconversation.conversation_id,\n          page\n        );\n        console.log(messagesobj.page);\n        setmessages(messagesobj.messages);\n        setPage(messagesobj.page);\n        setLoading_messages(false);\n        // setCount(messagesobj.count);\n      } else {\n      }\n    };\n\n    main_message_container.addEventListener('scroll', onscroll);\n\n    return () => {\n      main_message_container.removeEventListener('scroll', onscroll);\n    };\n  }, [\n    page,\n    count,\n    loading_messages,\n    openedconversation,\n    getmessages,\n    messages,\n  ]);\n\n  let message = '';\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    message = message.trim();\n    const messageObject = {\n      message,\n      sender: `${user.first_name} ${user.last_name}`,\n      sender_id: user.id,\n      conversation_id: openedconversation.conversation_id,\n      date: new Date(),\n      delivering: true,\n    };\n    setmessages([...messages, messageObject]);\n    scrollToBottom();\n    // messageObject.delivering = undefined;\n    socket.emit('message', messageObject);\n    const messageInput = document.querySelector('.message-input textarea');\n    messageInput.focus();\n    setTimeout(() => {\n      scrollToBottom();\n      messageInput.value = '';\n    }, 100);\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {loading_messages ? (\n          <div className=\"loader\">\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        ) : (\n          <></>\n        )}\n        {messages ? (\n          messages.map((message, i) => {\n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n                delevering={message.delevering}\n              />\n            );\n          })\n        ) : (\n          <></>\n        )}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== '') {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = 'message',\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n  delivering,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === 'message') {\n    let message_classname = group ? 'message group-message' : 'message';\n\n    return (\n      <div\n        style={{\n          background: delivering ? 'rgb(255, 133, 133)' : '',\n          opacity: delivering ? '.5' : '',\n        }}\n        className={message_classname}\n        id={user.id === sender_id ? 'sent-message' : 'message'}\n      >\n        <h1 id={group ? 'group-sender' : ''}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === 'badge') {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var strTime = hours + ':' + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport MessagingWindow from './MessagingWindow';\n//context\nimport { ChatContext, ChatContextProvider } from './ChatContext';\n// Assets\nimport logo from './assets/img/logo.png';\n\n// style\nimport './scss/chat-page.css';\nimport { GlobalContext } from './GloablContext';\n\nimport api from './api';\n\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  const [addconversationview, setaddconversationview] = useState(false);\n  const { user } = useContext(GlobalContext);\n\n  useEffect(() => {\n    document.querySelector('.menu header').scrollIntoView();\n  }, []);\n  return (\n    <>\n      <div className=\"menu\">\n        <header>\n          <img src={logo} alt=\"logo\" />\n          <h2>{user.first_name}</h2>\n        </header>\n\n        <ConversationList />\n        <Options setaddconversationview={setaddconversationview} />\n      </div>\n      {addconversationview && (\n        <AddConversationDialog\n          setaddconversationview={setaddconversationview}\n        />\n      )}\n    </>\n  );\n};\nconst Options = ({ setaddconversationview }) => {\n  return (\n    <>\n      <div className=\"menu-options\">\n        <div className=\"option\" onClick={() => setaddconversationview(true)}>\n          <img\n            src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n            alt=\"\"\n          />\n          <span>start chat</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst ConversationList = () => {\n  const { conversations } = useContext(ChatContext);\n\n  /* useEffect(() => {\n    updateConversations();\n    // eslint-disable-next-line\n  }, []); */\n\n  if (conversations.length) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation, markRead } = useContext(\n    ChatContext\n  );\n\n  const onclick = (e, group) => {\n    // markRead(conversation.conversation_id);\n    setTimeout(() => {\n      document.querySelector('.messages-view').style.display = 'none';\n      const messageInput = document.querySelector('.message-input textarea');\n      messageInput.focus();\n    });\n    const conversation_opened = { ...conversation, group };\n\n    window.localStorage.setItem(\n      'openedconversation',\n      JSON.stringify(conversation_opened)\n    );\n\n    setOpenedconversation(conversation_opened);\n  };\n\n  useEffect(() => {\n    const opened_conversation = JSON.parse(\n      window.localStorage.getItem('openedconversation')\n    );\n    if (\n      opened_conversation &&\n      conversation.conversation_id === opened_conversation.conversation_id\n    ) {\n      setTimeout(() => {\n        document.querySelector('.messages-view').style.display = 'none';\n        const messageInput = document.querySelector('.message-input textarea');\n        messageInput.focus();\n      });\n      const conversation_opened = { ...conversation, group: false };\n\n      setOpenedconversation(conversation_opened);\n    }\n\n    console.log(opened_conversation);\n  }, [conversation, setOpenedconversation]);\n  const indicator =\n    conversation.unread &&\n    !(conversation.conversation_id === openedconversation.conversation_id)\n      ? '7px solid rgb(143, 255, 143)'\n      : '';\n  let conversation_name = conversation.conversation_name;\n\n  if (Array.isArray(conversation_name)) {\n    conversation_name = conversation_name\n      .filter((name) => name !== user.first_name)\n      .join(', ');\n  }\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={onclick}\n        className=\"conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          onclick(null, true);\n          // setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst AddConversationDialog = ({ setaddconversationview }) => {\n  const [sugesstions, setsugesstions] = useState();\n  const [participants, setparticipants] = useState();\n  const { user, startconversation } = useContext(ChatContext);\n\n  const addparticipant = (suggestion) => {\n    let exists = false;\n    participants &&\n      participants.forEach((participant) => {\n        if (participant) {\n          if (participant.mobile === suggestion.mobile) exists = true;\n        }\n      });\n\n    if (!exists) {\n      setparticipants([...(participants || []), suggestion]);\n    }\n  };\n\n  useEffect(() => {\n    const input = document.querySelector('#conversation-adder');\n    const conversationadd = document; //|| document.querySelector('.conversation-add');\n    input.focus();\n    const enteradd = (e) => {\n      if (e.key === 'Enter' && sugesstions) {\n        addparticipant(sugesstions[0]);\n        e.preventDefault();\n      }\n    };\n    const dismiss = (e) => {\n      if (e.keyCode === 27) setaddconversationview(false);\n    };\n\n    input.addEventListener('keydown', enteradd);\n    conversationadd.addEventListener('keydown', dismiss);\n\n    return () => {\n      conversationadd.removeEventListener('keydown', dismiss);\n      input.removeEventListener('keydown', enteradd);\n    };\n  });\n\n  const onchange = async (e) => {\n    e.preventDefault();\n\n    if (e.target.value !== '') {\n      const s = await api.search(e.target.value);\n\n      setsugesstions(s.filter((u) => u.mobile !== user.mobile));\n    } else {\n      setsugesstions([]);\n    }\n  };\n\n  const removeparticipant = (suggestion) => {\n    let newlist =\n      participants &&\n      participants.filter((participant) => {\n        if (participant.mobile === suggestion.mobile) return false;\n        return true;\n      });\n\n    setparticipants(newlist);\n  };\n\n  const start = async () => {\n    startconversation(participants);\n  };\n  const dismiss = (e) => {\n    if (e.target.className === 'conversation-add') {\n      setaddconversationview(false);\n    }\n  };\n  return (\n    <div className=\"conversation-add\" onClick={dismiss}>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <div className=\"users-input\">\n          <h2>Create</h2>\n          {participants && participants.length !== 0 && (\n            <div className=\"participants\">\n              {participants.map((participant, i) => (\n                <div key={i} className=\"participant\">\n                  <span>{participant.first_name}</span>\n                  <img\n                    onClick={() => {\n                      removeparticipant(participant);\n                    }}\n                    src=\"https://img.icons8.com/pastel-glyph/64/000000/cancel.png\"\n                    alt=\"cancel\"\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n          <input\n            onChange={onchange}\n            onSubmit={(e) => e.preventDefault()}\n            id=\"conversation-adder\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n            autoComplete=\"off\"\n          />\n\n          {sugesstions && sugesstions.length !== 0 && (\n            <div className=\"suggestions\">\n              {sugesstions.map((suggestion, i) => (\n                <div\n                  key={i}\n                  onClick={() => addparticipant(suggestion)}\n                  className=\"suggestion\"\n                >\n                  <h4>{suggestion.first_name}</h4>\n                  <p>{suggestion.mobile}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        <button\n          className={\n            participants && participants.length ? '' : 'disabled-button'\n          }\n          onClick={start}\n        >\n          Start\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\n\n// components\nimport Login from \"./Login\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext } from \"./GloablContext\";\n\n\nconst App = () => {\n  \n  const { authentication } = useContext(GlobalContext);\n  return authentication ? <ChatPage /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//global context\nimport { GlobalContextProvider } from './components/GloablContext';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}