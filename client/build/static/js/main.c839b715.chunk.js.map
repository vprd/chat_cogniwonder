{"version":3,"sources":["api-endpoint.js","components/api.js","components/GloablContext.jsx","components/Login.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","location","origin","API_ENDPOINT","getendpoint","api","getconversations","userid","a","point","axios","post","result","data","getmessages","conversation_id","authenticate","console","log","Number","search","user","startconversation","ids","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","name","setuser","email_pwd","localStorage","setItem","mobile","email","first_name","last_name","id","setTimeout","Provider","value","Authenticate","Login","useContext","username","useEffect","split","onchange","e","target","onsubmit","preventDefault","className","action","onSubmit","onChange","type","placeholder","required","socket_endpoint","SOCKET_SETUP","ChatContext","ChatContextProvider","openedconversation","setOpenedconversation","conversations","setconversations","participants","length","map","parti","socket","io","on","notification","event","removeAllListeners","disconnect","updateConversations","useCallback","convos","markUndread","markRead","TEST","Messages","useRef","transport","current","messages","setmessages","list","document","querySelector","scrollTop","scrollHeight","message","style","display","sendmessage","messageObject","trim","sender","sender_id","date","Date","delivering","emit","messageInput","focus","filter","delevering","i","key","text","sender_name","group","onKeyDown","shiftKey","keyCode","onClick","src","alt","Message","message_classname","background","opacity","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","changegroupname","setchangegroupname","Object","keys","ChangeName","groupname","setgroupname","newname","inputfield","addEventListener","dismiss","removeEventListener","conversation_name","Array","isArray","join","Menu","addconversationview","setaddconversationview","logo","Options","ConversationList","conversation","Conversation","indicator","unread","borderRight","AddConversationDialog","sugesstions","setsugesstions","setparticipants","addparticipant","suggestion","exists","forEach","participant","input","conversationadd","enteradd","s","u","start","newlist","removeparticipant","autoComplete","ChatPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.c839b715.chunk.js","sourcesContent":["\n\nexport default function endpoint() {\n\n        const endpoint = [\n                'http://localhost:8000/',\n                'https://chat.cogniwonder.com/',\n                'https://cogniwonder.herokuapp.com/'\n        ];\n\n        switch (window.location.origin) {\n                case 'http://localhost:3000':\n                        window.API_ENDPOINT = endpoint[0];\n                        return window.API_ENDPOINT;\n\n                default:\n                        window.API_ENDPOINT = window.location.origin + '/';\n                        return window.API_ENDPOINT;\n        }\n\n        /* window.API_ENDPOINT = 'http://localhost:8000/';\n        return window.API_ENDPOINT; */\n\n        /* window.API_ENDPOINT = 'https://chat.cogniwonder.com/';\n        return window.API_ENDPOINT; */\n\n        /* window.API_ENDPOINT = 'https://cogniwonder.herokuapp.com/';\n        return window.API_ENDPOINT; */\n\n}","import axios from 'axios';\n\nimport getendpoint from '../api-endpoint'\n\n\nconst endpoint = `${getendpoint()}api`;\n\nconst api = {\n\n    getconversations: async (userid) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            userid\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id\n        });\n\n        return result.data;\n    },\n    authenticate: async (data) => {\n        console.log(endpoint + \"/authenticate\")\n\n        const result = await axios.post(endpoint + \"/authenticate\", {\n            [Number(data) ? 'mobile' : 'email']: data\n        });\n\n        return result.data;\n    },\n\n    search: async (user) => {\n        const point = endpoint + '/search';\n\n        const result = await axios.post(point, {\n            user\n        });\n\n        return result.data;\n    },\n    startconversation: async (ids) => {\n        const point = endpoint + '/startconversation';\n\n        const result = await axios.post(point, {\n            ids\n        });\n\n        return result.data;\n    },\n\n}\n\nexport default api;","import React, { createContext, useState } from 'react';\nimport api from './api';\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ userid: 0, name: '' });\n\n  async function Authenticate(email_pwd) {\n    \n    const user = await api.authenticate(email_pwd);\n    if (user) {\n      localStorage.setItem('email_pwd', email_pwd);\n\n      setuser({\n        mobile: user.mobile,\n        email: user.email,\n        first_name: user.first_name,\n        last_name: user.last_name,\n        id: user.id,\n      });\n      setTimeout(() => setAuthentication(true));\n    } else {\n      setAuthentication(false);\n    }\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\n\n// contexts\nimport { GlobalContext } from './GloablContext';\n\n//styles\n\nimport './scss/Login.css';\nconst Login = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  let username = '';\n\n  useEffect(() => {\n    if (window.location.search) {\n      try {\n        let username = window.location.search.split('?')[1];\n        Authenticate(username);\n      } catch {}\n    }\n\n    /* const username = localStorage.getItem('email_pwd');\n    if (username) {\n      Authenticate(username);\n    } */\n    // eslint-disable-next-line\n  }, []);\n\n  onchange = (e) => {\n    if (e.target.id === 'username') username = e.target.value;\n  };\n\n  onsubmit = async (e) => {\n    e.preventDefault();\n    Authenticate(username);\n  };\n  return (\n    <div className=\"login-page\">\n      <form action=\"post\" onSubmit={onsubmit}>\n        <div className=\"username\">\n          <input\n            onChange={onchange}\n            id=\"username\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n          />\n        </div>\n        {/* <div className=\"password\">\n          <input\n            onChange={onchange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div> */}\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, {\n  useRef,\n  useEffect,\n  createContext,\n  useContext,\n  useState,\n  useMemo,\n} from 'react';\n\nimport api from './api';\nimport io from 'socket.io-client';\n\n//global context\nimport { GlobalContext } from './GloablContext';\n\nimport getendpoint from '../api-endpoint';\nimport { useCallback } from 'react';\n\nconst endpoint = `${getendpoint()}`;\n\nconst socket_endpoint = endpoint;\nwindow.SOCKET_SETUP = 0;\n/* mainsocket.on('debug', (message) => {\n  console.log('debugger:',message);\n}); */\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n\n  /* const sockets = useMemo(\n    function () {\n      if (\n        Array.isArray(conversations) &&\n        conversations.length &&\n        window.SOCKET_SETUP !== conversations.length\n      ) {\n        console.log('starting listeners');\n        const newconversation_sockets = conversations.map((conversation) => {\n          const socket = io(\n            `${socket_endpoint}conversation${conversation.conversation_id}`\n          );\n\n          socket.on('connect', () => {\n            console.log('socket.io connected');\n          });\n\n          window.SOCKET_SETUP = conversations.length;\n          return { id: conversation.conversation_id, socket };\n        });\n        return newconversation_sockets.sort();\n      }\n    },\n    [conversations]\n  ); */\n  // const conversation_sockets_reference = useRef(sockets);\n  // const conversation_sockets = conversation_sockets_reference.current;\n  /* useEffect(() => {\n    connectToConversationSockets();\n  }, [conversations]); */\n  /* const render_counter = useRef(0);\n  console.log(render_counter.current++); */\n  async function startconversation(participants) {\n    if (participants && participants.length) {\n      const ids = [...participants, user].map((parti) => parti.id);\n      await api.startconversation(ids);\n\n      // await updateConversations();\n    }\n  }\n\n  useEffect(() => {\n    if (user.id) {\n      const socket = io(`${socket_endpoint}notification${user.id}`);\n\n      socket.on('connect', () =>\n        console.log('connected to notification channel')\n      );\n\n      socket.on('notification', async (notification) => {\n        if (notification.event === 'newconversation') {\n          // await updateConversations();\n        }\n      });\n\n      return () => {\n        socket.removeAllListeners();\n        socket.disconnect();\n      };\n    }\n  }, [user]);\n\n  /* function getSocket(conversation_id) {\n    const result = conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n    console.log('sockets', result);\n    return result;\n  } */\n\n  const updateConversations = useCallback(\n    async function updateConversations() {\n      const convos = await api.getconversations(user.id);\n      setconversations(convos);\n    },\n    [user.id]\n  );\n  useEffect(() => {\n    updateConversations();\n  }, [updateConversations]);\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation.conversation_id &&\n          conversation_id !== openedconversation.conversation_id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation.conversation_id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        startconversation,\n        markRead,\n        user,\n        // getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nif (window.TEST) {\n  console.log(window.TEST++);\n} else {\n  window.TEST = 0;\n  console.log(window.TEST++);\n}\n","import React, { useRef, useState, useEffect, useContext } from 'react';\n\nimport { ChatContext } from './ChatContext';\n\nimport getendpoint from '../api-endpoint';\nimport io from 'socket.io-client';\n\nconst endpoint = `${getendpoint()}`;\nconst socket_endpoint = endpoint;\n\nconst MessagingWindow = () => {\n  const { openedconversation, user } = useContext(ChatContext);\n  const [changegroupname, setchangegroupname] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    function ChangeName({ groupname, setgroupname, setchangegroupname }) {\n      let newname = '';\n\n      const onchange = (e) => {\n        e.preventDefault();\n        newname = e.target.value;\n        console.log(newname);\n      };\n      useEffect(() => {\n        const inputfield = document.querySelector('#group-name-changer');\n        inputfield.focus();\n        inputfield.addEventListener('focusout', () => {\n          setchangegroupname(false);\n        });\n\n        const dismiss = (e) => {\n          if (e.keyCode === 27) setchangegroupname(false);\n        };\n\n        document.addEventListener('keydown', dismiss);\n\n        return () => {\n          document.removeEventListener('keydown', dismiss);\n        };\n      });\n\n      return (\n        <form onSubmit={setgroupname} className=\"group-name-input\">\n          <input\n            onChange={onchange}\n            id=\"group-name-changer\"\n            type=\"text\"\n            value={groupname}\n          />\n        </form>\n      );\n    }\n\n    let conversation_name = openedconversation.conversation_name;\n\n    if (Array.isArray(conversation_name)) {\n      conversation_name = conversation_name\n        .filter((name) => name !== user.first_name)\n        .join(', ');\n    }\n\n    const setconversation_name = (newname) => {};\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\" onClick={() => setchangegroupname(true)}>\n            {!changegroupname ? (\n              <h4>{conversation_name}</h4>\n            ) : (\n              <ChangeName\n                groupname={conversation_name}\n                setgroupname={setconversation_name}\n                {...{ setchangegroupname }}\n              />\n            )}\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const { getmessages, openedconversation, user } = useContext(ChatContext);\n\n  let socketRef = useRef(\n    io(`${socket_endpoint}conversation${openedconversation.conversation_id}`, {\n      transport: ['websocket'],\n    })\n  );\n  const socket = socketRef.current;\n\n  const [messages, setmessages] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      setmessages(await getmessages(openedconversation.conversation_id));\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n\n      return () => {\n        setmessages([]);\n      };\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    socket.on('message', async (message) => {\n      if (message.conversation_id === openedconversation.conversation_id) {\n        setmessages(await getmessages(openedconversation.conversation_id));\n        const list = document.querySelector('.chat-screen');\n        list.scrollTop = list.scrollHeight;\n      }\n    });\n\n    return () => {\n      socket.removeAllListeners('message');\n\n      /* socket.on('message', (message) => {\n      \n      }); */\n    };\n  }, [getmessages, openedconversation, socket]);\n\n  useEffect(() => {\n    document.querySelector('.messages-view').style.display = '';\n\n    return () => {\n      document.querySelector('.messages-view').style.display = 'none';\n    };\n  }, [messages]);\n\n  let message = '';\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    message = message.trim();\n    const messageObject = {\n      message,\n      sender: `${user.first_name} ${user.last_name}`,\n      sender_id: user.id,\n      conversation_id: openedconversation.conversation_id,\n      date: new Date(),\n      delivering: true,\n    };\n    setmessages([...messages, messageObject]);\n    // messageObject.delivering = undefined;\n    socket.emit('message', messageObject);\n    const messageInput = document.querySelector('.message-input textarea');\n    setTimeout(() => {\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n      messageInput.value = '';\n    });\n    messageInput.focus();\n  };\n  console.log(messages.filter((message) => message.delevering));\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {messages ? (\n          messages.map((message, i) => {\n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n                delevering={message.delevering}\n              />\n            );\n          })\n        ) : (\n          <></>\n        )}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== '') {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = 'message',\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n  delivering,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === 'message') {\n    let message_classname = group ? 'message group-message' : 'message';\n\n    return (\n      <div\n        style={{\n          background: delivering ? 'rgb(255, 133, 133)' : '',\n          opacity: delivering ? '.5' : '',\n        }}\n        className={message_classname}\n        id={user.id === sender_id ? 'sent-message' : 'message'}\n      >\n        <h1 id={group ? 'group-sender' : ''}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === 'badge') {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var strTime = hours + ':' + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport MessagingWindow from './MessagingWindow';\n//context\nimport { ChatContext, ChatContextProvider } from './ChatContext';\n// Assets\nimport logo from './assets/img/logo.png';\n\n// style\nimport './scss/chat-page.css';\nimport { GlobalContext } from './GloablContext';\n\nimport api from './api';\n\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  const [addconversationview, setaddconversationview] = useState(false);\n  const { user } = useContext(GlobalContext);\n  return (\n    <>\n      <div className=\"menu\">\n        <header>\n          <img src={logo} alt=\"logo\" />\n          <h2>{user.first_name}</h2>\n        </header>\n\n        <ConversationList />\n        <Options setaddconversationview={setaddconversationview} />\n      </div>\n      {addconversationview && (\n        <AddConversationDialog\n          setaddconversationview={setaddconversationview}\n        />\n      )}\n    </>\n  );\n};\nconst Options = ({ setaddconversationview }) => {\n  return (\n    <>\n      <div className=\"menu-options\">\n        <div className=\"option\" onClick={() => setaddconversationview(true)}>\n          <img\n            src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n            alt=\"\"\n          />\n          <span>start chat</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst ConversationList = () => {\n  const { conversations } = useContext(ChatContext);\n\n  /* useEffect(() => {\n    updateConversations();\n    // eslint-disable-next-line\n  }, []); */\n\n  if (conversations) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation, markRead } = useContext(\n    ChatContext\n  );\n\n  const indicator =\n    conversation.unread &&\n    !(conversation.conversation_id === openedconversation.conversation_id)\n      ? '7px solid rgb(143, 255, 143)'\n      : '';\n  let conversation_name = conversation.conversation_name;\n\n  if (Array.isArray(conversation_name)) {\n    conversation_name = conversation_name\n      .filter((name) => name !== user.first_name)\n      .join(', ');\n  }\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={() => {\n          // markRead(conversation.conversation_id);\n          setTimeout(() => {\n            document.querySelector('.messages-view').style.display = 'none';\n          });\n\n          setOpenedconversation({ ...conversation, group: false });\n        }}\n        className=\"conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst AddConversationDialog = ({ setaddconversationview }) => {\n  const [sugesstions, setsugesstions] = useState();\n  const [participants, setparticipants] = useState();\n  const { user, startconversation } = useContext(ChatContext);\n\n  const addparticipant = (suggestion) => {\n    let exists = false;\n    participants &&\n      participants.forEach((participant) => {\n        if (participant) {\n          if (participant.mobile === suggestion.mobile) exists = true;\n        }\n      });\n\n    if (!exists) {\n      setparticipants([...(participants || []), suggestion]);\n    }\n  };\n\n  useEffect(() => {\n    const input = document.querySelector('#conversation-adder');\n    const conversationadd = document; //|| document.querySelector('.conversation-add');\n    input.focus();\n    const enteradd = (e) => {\n      if (e.key === 'Enter' && sugesstions) {\n        addparticipant(sugesstions[0]);\n        e.preventDefault();\n      }\n    };\n    const dismiss = (e) => {\n      if (e.keyCode === 27) setaddconversationview(false);\n    };\n\n    input.addEventListener('keydown', enteradd);\n    conversationadd.addEventListener('keydown', dismiss);\n\n    return () => {\n      conversationadd.removeEventListener('keydown', dismiss);\n      input.removeEventListener('keydown', enteradd);\n    };\n  });\n\n  const onchange = async (e) => {\n    e.preventDefault();\n\n    if (e.target.value !== '') {\n      const s = await api.search(e.target.value);\n\n      setsugesstions(s.filter((u) => u.mobile !== user.mobile));\n    } else {\n      setsugesstions([]);\n    }\n  };\n\n  const removeparticipant = (suggestion) => {\n    let newlist =\n      participants &&\n      participants.filter((participant) => {\n        if (participant.mobile === suggestion.mobile) return false;\n        return true;\n      });\n\n    setparticipants(newlist);\n  };\n\n  const start = async () => {\n    startconversation(participants);\n  };\n  const dismiss = (e) => {\n    if (e.target.className === 'conversation-add') {\n      setaddconversationview(false);\n    }\n  };\n  return (\n    <div className=\"conversation-add\" onClick={dismiss}>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <div className=\"users-input\">\n          <h2>Create</h2>\n          {participants && participants.length !== 0 && (\n            <div className=\"participants\">\n              {participants.map((participant, i) => (\n                <div key={i} className=\"participant\">\n                  <span>{participant.first_name}</span>\n                  <img\n                    onClick={() => {\n                      removeparticipant(participant);\n                    }}\n                    src=\"https://img.icons8.com/pastel-glyph/64/000000/cancel.png\"\n                    alt=\"cancel\"\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n          <input\n            onChange={onchange}\n            onSubmit={(e) => e.preventDefault()}\n            id=\"conversation-adder\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n            autoComplete=\"off\"\n          />\n\n          {sugesstions && sugesstions.length !== 0 && (\n            <div className=\"suggestions\">\n              {sugesstions.map((suggestion, i) => (\n                <div\n                  key={i}\n                  onClick={() => addparticipant(suggestion)}\n                  className=\"suggestion\"\n                >\n                  <h4>{suggestion.first_name}</h4>\n                  <p>{suggestion.mobile}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        <button\n          className={\n            participants && participants.length ? '' : 'disabled-button'\n          }\n          onClick={start}\n        >\n          Start\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\n\n// components\nimport Login from \"./Login\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext } from \"./GloablContext\";\n\n\nconst App = () => {\n  \n  const { authentication } = useContext(GlobalContext);\n  return authentication ? <ChatPage /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//global context\nimport { GlobalContextProvider } from './components/GloablContext';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}