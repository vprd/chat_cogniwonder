{"version":3,"sources":["api-endpoint.js","components/api.js","components/GloablContext.jsx","components/Login.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","API_ENDPOINT","getendpoint","api","getconversations","userid","a","point","axios","post","result","data","getmessages","conversation_id","authenticate","console","log","Number","search","user","startconversation","ids","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","name","setuser","email_pwd","localStorage","setItem","mobile","email","first_name","last_name","id","setTimeout","Provider","value","Authenticate","Login","useContext","username","useEffect","location","split","onchange","e","target","onsubmit","preventDefault","className","action","onSubmit","onChange","type","placeholder","required","socket_endpoint","ChatContext","ChatContextProvider","openedconversation","setOpenedconversation","conversations","setconversations","conversation_sockets","setconversation_sockets","participants","length","map","parti","updateConversations","convos","Array","isArray","conversation","socket","io","on","message","sort","connectToConversationSockets","notification","event","removeAllListeners","disconnect","markUndread","markRead","getSocket","filter","conversation_socket","Messages","messages","setmessages","list","document","querySelector","scrollTop","scrollHeight","transport","style","opacity","sendmessage","trim","emit","sender","sender_id","date","Date","messageInput","focus","i","key","text","sender_name","group","onKeyDown","shiftKey","keyCode","onClick","src","alt","Message","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","changegroupname","setchangegroupname","Object","keys","ChangeName","groupname","setgroupname","inputfield","addEventListener","dismiss","removeEventListener","conversation_name","join","newname","Menu","addconversationview","setaddconversationview","logo","Options","ConversationList","Conversation","indicator","unread","borderRight","AddConversationDialog","sugesstions","setsugesstions","setparticipants","addparticipant","suggestion","exists","forEach","participant","input","conversationadd","enteradd","s","u","start","newlist","removeparticipant","autoComplete","ChatPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.ee0c25c8.chunk.js","sourcesContent":["\nexport default function endpoint() {\n\n\n\n        /* window.API_ENDPOINT = 'http://localhost:8000/';\n        return window.API_ENDPOINT; */\n\n        window.API_ENDPOINT = 'https://chat.cogniwonder.com/';\n        return window.API_ENDPOINT;\n\n}","import axios from 'axios';\n\nimport getendpoint from '../api-endpoint'\n\n\nconst endpoint = `${getendpoint()}api`;\n\nconst api = {\n\n    getconversations: async (userid) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            userid\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id\n        });\n\n        return result.data;\n    },\n    authenticate: async (data) => {\n        console.log(endpoint + \"/authenticate\")\n\n        const result = await axios.post(endpoint + \"/authenticate\", {\n            [Number(data) ? 'mobile' : 'email']: data\n        });\n\n        return result.data;\n    },\n\n    search: async (user) => {\n        const point = endpoint + '/search';\n\n        const result = await axios.post(point, {\n            user\n        });\n\n        return result.data;\n    },\n    startconversation: async (ids) => {\n        const point = endpoint + '/startconversation';\n\n        const result = await axios.post(point, {\n            ids\n        });\n\n        return result.data;\n    },\n\n}\n\nexport default api;","import React, { createContext, useState } from 'react';\nimport api from './api';\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ userid: 0, name: '' });\n\n  async function Authenticate(email_pwd) {\n    \n    const user = await api.authenticate(email_pwd);\n    if (user) {\n      localStorage.setItem('email_pwd', email_pwd);\n\n      setuser({\n        mobile: user.mobile,\n        email: user.email,\n        first_name: user.first_name,\n        last_name: user.last_name,\n        id: user.id,\n      });\n      setTimeout(() => setAuthentication(true));\n    } else {\n      setAuthentication(false);\n    }\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\n\n// contexts\nimport { GlobalContext } from './GloablContext';\n\n//styles\n\nimport './scss/Login.css';\nconst Login = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  let username = '';\n\n  useEffect(() => {\n    if (window.location.search) {\n      try {\n        let username = window.location.search.split('?')[1];\n        Authenticate(username);\n      } catch {}\n    }\n\n    /* const username = localStorage.getItem('email_pwd');\n    if (username) {\n      Authenticate(username);\n    } */\n    // eslint-disable-next-line\n  }, []);\n\n  onchange = (e) => {\n    if (e.target.id === 'username') username = e.target.value;\n  };\n\n  onsubmit = async (e) => {\n    e.preventDefault();\n    Authenticate(username);\n  };\n  return (\n    <div className=\"login-page\">\n      <form action=\"post\" onSubmit={onsubmit}>\n        <div className=\"username\">\n          <input\n            onChange={onchange}\n            id=\"username\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n          />\n        </div>\n        {/* <div className=\"password\">\n          <input\n            onChange={onchange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div> */}\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, {\n  useEffect,\n  createContext,\n  useContext,\n  useState,\n} from 'react';\n\nimport api from './api';\nimport io from 'socket.io-client';\n\n//global context\nimport { GlobalContext } from './GloablContext';\n\nimport getendpoint from '../api-endpoint';\n\nconst endpoint = `${getendpoint()}`;\n\nconst socket_endpoint = endpoint;\n\n/* mainsocket.on('debug', (message) => {\n  console.log('debugger:',message);\n}); */\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n\n  const [conversation_sockets, setconversation_sockets] = useState();\n\n  useEffect(() => {\n\n    setconversation_sockets(\n      connectToConversationSockets(conversations)\n    );\n\n  }, [conversations]);\n\n  async function startconversation(participants) {\n    if (participants && participants.length) {\n      const ids = [...participants, user].map((parti) => parti.id);\n      await api.startconversation(ids);\n\n      await updateConversations();\n    }\n  }\n\n  useEffect(() => {\n    const socket = io(`${socket_endpoint}notification${user.id}`);\n\n    socket.on('connect', () =>\n      console.log('connected to notification channel')\n    );\n\n    socket.on('notification', (notification) => {\n      if (notification.event === 'newconversation') {\n        updateConversations();\n      }\n    });\n\n    return () => {\n      socket.removeAllListeners();\n      socket.disconnect();\n    };\n  }, []);\n\n  function getSocket(conversation_id) {\n    return conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n  }\n\n  async function updateConversations() {\n    const convos = await api.getconversations(user.id);\n    setconversations(convos);\n  }\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation.conversation_id &&\n          conversation_id !== openedconversation.conversation_id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation.conversation_id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        startconversation,\n        markRead,\n        user,\n        getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nfunction connectToConversationSockets(conversations) {\n  if (Array.isArray(conversations) && conversations.length) {\n    console.log('starting listeners');\n    const conversation_sockets = conversations.map((conversation) => {\n      const socket = io(\n        `${socket_endpoint}conversation${conversation.conversation_id}`\n      );\n\n      socket.on('connect', () => {\n        console.log('socket.io connected');\n      });\n\n      socket.on('message', (message) => {});\n\n      return { id: conversation.conversation_id, socket };\n    });\n\n    return conversation_sockets.sort();\n  }\n}\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport { ChatContext } from './ChatContext';\n\nimport getendpoint from '../api-endpoint';\nimport io from 'socket.io-client';\n\nconst endpoint = `${getendpoint()}`;\nconst socket_endpoint = endpoint;\n\n\nconst MessagingWindow = () => {\n  const { openedconversation, user } = useContext(ChatContext);\n  const [changegroupname, setchangegroupname] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    function ChangeName({ groupname, setgroupname, setchangegroupname }) {\n      let newname = '';\n\n      const onchange = (e) => {\n        newname = e.target.value;\n      };\n      useEffect(() => {\n        const inputfield = document.querySelector('#group-name-changer');\n        inputfield.focus();\n        inputfield.addEventListener('focusout', () => {\n          setchangegroupname(false);\n        });\n\n        const dismiss = (e) => {\n          if (e.keyCode === 27) setchangegroupname(false);\n        };\n\n        document.addEventListener('keydown', dismiss);\n\n        return () => {\n          document.removeEventListener('keydown', dismiss);\n        };\n      });\n\n      return (\n        <form onSubmit={setgroupname} className=\"group-name-input\">\n          <input\n            onChange={onchange}\n            id=\"group-name-changer\"\n            type=\"text\"\n            value={groupname}\n          />\n        </form>\n      );\n    }\n\n    let conversation_name = openedconversation.conversation_name;\n\n    if (Array.isArray(conversation_name)) {\n      conversation_name = conversation_name\n        .filter((name) => name !== user.first_name)\n        .join(', ');\n    }\n\n    const setconversation_name = (newname) => {};\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\" onClick={() => setchangegroupname(true)}>\n            {!changegroupname ? (\n              <h4>{conversation_name}</h4>\n            ) : (\n              <ChangeName\n                groupname={conversation_name}\n                setgroupname={setconversation_name}\n                {...{ setchangegroupname }}\n              />\n            )}\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const {\n    getmessages,\n    openedconversation,\n    getSocket,\n    user,\n  } = useContext(ChatContext);\n\n  let socket=[];\n  try {\n    socket = getSocket(openedconversation.conversation_id)[0].socket;\n  } catch {\n    \n  }\n  const [messages, setmessages] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      setmessages(await getmessages(openedconversation.conversation_id));\n      const list = document.querySelector('.chat-screen');\n      list.scrollTop = list.scrollHeight;\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    const socket = io(\n      `${socket_endpoint}conversation${openedconversation.conversation_id}`,\n      { transport: ['websocket'] }\n    );\n    socket.on('message', async (message) => {\n      if (message.conversation_id === openedconversation.conversation_id) {\n        setmessages(await getmessages(openedconversation.conversation_id));\n        const list = document.querySelector('.chat-screen');\n        list.scrollTop = list.scrollHeight;\n      }\n\n      \n    });\n\n    return () => {\n      socket.removeAllListeners('message');\n      /* socket.on('message', (message) => {\n        \n      }); */\n    };\n  }, [getmessages, openedconversation,]);\n\n  useEffect(() => {\n    document.querySelector('.messages-view').style.opacity = 1;\n  });\n\n  let message = '';\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    message = message.trim();\n    socket.emit('message', {\n      message,\n      sender: `${user.first_name} ${user.last_name}`,\n      sender_id: user.id,\n      conversation_id: openedconversation.conversation_id,\n      date: new Date(),\n    });\n    const messageInput = document.querySelector('.message-input textarea');\n    setTimeout(() => (messageInput.value = ''));\n    messageInput.focus();\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {messages &&\n          messages.map((message, i) => {\n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n              />\n            );\n          })}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== '') {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = 'message',\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === 'message') {\n    return (\n      <div\n        className={group ? 'message group-message' : 'message'}\n        id={user.id === sender_id ? 'sent-message' : 'message'}\n      >\n        <h1 id={group ? 'group-sender' : ''}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === 'badge') {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var strTime = hours + ':' + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport MessagingWindow from './MessagingWindow';\n//context\nimport { ChatContext, ChatContextProvider } from './ChatContext';\n// Assets\nimport logo from './assets/img/logo.png';\n\n// style\nimport './scss/chat-page.css';\nimport { GlobalContext } from './GloablContext';\n\nimport api from './api';\n\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  const [addconversationview, setaddconversationview] = useState(false);\n  const { user } = useContext(GlobalContext);\n  return (\n    <>\n      <div className=\"menu\">\n        <header>\n          <img src={logo} alt=\"logo\" />\n          <h2>{user.first_name}</h2>\n        </header>\n\n        <ConversationList />\n        <Options setaddconversationview={setaddconversationview} />\n      </div>\n      {addconversationview && (\n        <AddConversationDialog\n          setaddconversationview={setaddconversationview}\n        />\n      )}\n    </>\n  );\n};\nconst Options = ({ setaddconversationview }) => {\n  return (\n    <>\n      <div className=\"menu-options\">\n      \n        <div className=\"option\" onClick={() => setaddconversationview(true)}>\n          <img\n            src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n            alt=\"\"\n          />\n          <span>start chat</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst ConversationList = () => {\n  const { conversations, updateConversations } = useContext(ChatContext);\n\n  useEffect(() => {\n    updateConversations();\n    // eslint-disable-next-line\n  }, []);\n\n  if (conversations) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation, markRead } = useContext(\n    ChatContext\n  );\n\n  const indicator =\n    conversation.unread &&\n    !(conversation.conversation_id === openedconversation.conversation_id)\n      ? '7px solid rgb(143, 255, 143)'\n      : '';\n  let conversation_name = conversation.conversation_name;\n\n  if (Array.isArray(conversation_name)) {\n    conversation_name = conversation_name\n      .filter((name) => name !== user.first_name)\n      .join(', ');\n  }\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          \n          if (document.querySelector('.messages-view'))\n            document.querySelector('.messages-view').style.opacity = 0;\n          \n          setOpenedconversation({ ...conversation, group: false });\n        }}\n        className=\"conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? 'opened-conversation'\n            : ''\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst AddConversationDialog = ({ setaddconversationview }) => {\n  const [sugesstions, setsugesstions] = useState();\n  const [participants, setparticipants] = useState();\n  const { user, startconversation } = useContext(ChatContext);\n\n  const addparticipant = (suggestion) => {\n    let exists = false;\n    participants &&\n      participants.forEach((participant) => {\n        if (participant) {\n          if (participant.mobile === suggestion.mobile) exists = true;\n        }\n      });\n\n    if (!exists) {\n      setparticipants([...(participants || []), suggestion]);\n    }\n  };\n\n  useEffect(() => {\n    const input = document.querySelector('#conversation-adder');\n    const conversationadd = document; //|| document.querySelector('.conversation-add');\n    input.focus();\n    const enteradd = (e) => {\n      if (e.key === 'Enter' && sugesstions) {\n        addparticipant(sugesstions[0]);\n        e.preventDefault();\n      }\n    };\n    const dismiss = (e) => {\n      if (e.keyCode === 27) setaddconversationview(false);\n    };\n\n    input.addEventListener('keydown', enteradd);\n    conversationadd.addEventListener('keydown', dismiss);\n\n    return () => {\n      conversationadd.removeEventListener('keydown', dismiss);\n      input.removeEventListener('keydown', enteradd);\n    };\n  });\n\n  const onchange = async (e) => {\n    e.preventDefault();\n\n    if (e.target.value !== '') {\n      const s = await api.search(e.target.value);\n\n      setsugesstions(s.filter((u) => u.mobile !== user.mobile));\n    } else {\n      setsugesstions([]);\n    }\n  };\n\n  const removeparticipant = (suggestion) => {\n    let newlist =\n      participants &&\n      participants.filter((participant) => {\n        if (participant.mobile === suggestion.mobile) return false;\n        return true;\n      });\n\n    setparticipants(newlist);\n  };\n\n  const start = async () => {\n    startconversation(participants);\n  };\n  const dismiss = (e) => {\n    if (e.target.className === 'conversation-add') {\n      setaddconversationview(false);\n    }\n  };\n  return (\n    <div className=\"conversation-add\" onClick={dismiss}>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <div className=\"users-input\">\n          <h2>Create</h2>\n          {participants && participants.length !== 0 && (\n            <div className=\"participants\">\n              {participants.map((participant, i) => (\n                <div key={i} className=\"participant\">\n                  <span>{participant.first_name}</span>\n                  <img\n                    onClick={() => {\n                      removeparticipant(participant);\n                    }}\n                    src=\"https://img.icons8.com/pastel-glyph/64/000000/cancel.png\"\n                    alt=\"cancel\"\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n          <input\n            onChange={onchange}\n            onSubmit={(e) => e.preventDefault()}\n            id=\"conversation-adder\"\n            type=\"text\"\n            name=\"email/mobile\"\n            placeholder=\"email/mobile\"\n            required\n            autoComplete=\"off\"\n          />\n\n          {sugesstions && sugesstions.length !== 0 && (\n            <div className=\"suggestions\">\n              {sugesstions.map((suggestion, i) => (\n                <div\n                  key={i}\n                  onClick={() => addparticipant(suggestion)}\n                  className=\"suggestion\"\n                >\n                  <h4>{suggestion.first_name}</h4>\n                  <p>{suggestion.mobile}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        <button\n          className={\n            participants && participants.length ? '' : 'disabled-button'\n          }\n          onClick={start}\n        >\n          Start\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\n\n// components\nimport Login from \"./Login\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext } from \"./GloablContext\";\n\n\nconst App = () => {\n  \n  const { authentication } = useContext(GlobalContext);\n  return authentication ? <ChatPage /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//global context\nimport { GlobalContextProvider } from './components/GloablContext';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}