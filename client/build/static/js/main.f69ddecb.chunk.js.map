{"version":3,"sources":["components/api.js","components/GloablContext.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","location","protocol","hostname","port","api","getconversations","id","a","point","axios","post","result","data","getmessages","conversation_id","console","log","authenticate","username","AUTHENTICATION","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","user","setuser","setTimeout","Provider","value","Authenticate","socket_endpoint","ChatContext","ChatContextProvider","useContext","openedconversation","setOpenedconversation","conversations","setconversations","conversation_sockets","setconversation_sockets","convos","useEffect","CONVERSATION_SOCKET_CONNECTION","Array","isArray","length","map","conversation","socket","io","_id","connectToConversationSockets","markUndread","markRead","getSocket","filter","conversation_socket","updateConversations","Messages","messages","setmessages","list","document","querySelector","scrollTop","scrollHeight","on","message","sendmessage","trim","emit","sender","sender_id","date","Date","messageInput","focus","className","i","key","text","sender_name","group","onChange","e","target","onKeyDown","shiftKey","keyCode","type","placeholder","onClick","src","alt","Message","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","Object","keys","name","join","Menu","logo","ConversationList","Conversation","indicator","unread","style","borderRight","conversation_name","Options","ChatPage","App","get","search","then","d","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.f69ddecb.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nlet endpoint = window.location.protocol + '//' + window.location.hostname + ':' + (window.location.port === '3000' ? '8000' : window.location.port) + '/api';\nif (window.location.hostname === \"chatappinprogress.herokuapp.com\") {\n    endpoint =\n        \"https://chatappinprogress.herokuapp.com/api\";\n}\n\nconst api = {\n\n    getconversations: async (id) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            id\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id\n        });\n        console.log('this is message',result.data)\n        return result.data;\n    },\n    authenticate: async (username, id,) => {\n\n        if (!window.AUTHENTICATION) {\n            const result = await axios.post(endpoint + \"/authenticate\", {\n                username,\n                id,\n            });\n            window.AUTHENTICATION = true;\n            return result.data;\n        } return window.AUTHENTICATION;\n\n    }\n}\n\nexport default api;","import React, { createContext, useState } from \"react\";\nimport api from \"./api\";\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ id: \"\", username: \"\" });\n\n  async function Authenticate(username, id) {\n    setuser({ id, username });\n\n    setTimeout(() => setAuthentication(true));\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        setuser,\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useEffect, createContext, useContext, useState } from \"react\";\n\nimport api from \"./api\";\nimport io from \"socket.io-client\";\n\n//global context\nimport { GlobalContext } from \"./GloablContext\";\n\nconst socket_endpoint =\n  window.location.protocol +\n  \"//\" +\n  window.location.hostname +\n  \":\" +\n  (window.location.port === \"3000\" ? \"8000\" : window.location.port) +\n  \"/\";\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n  const [conversation_sockets, setconversation_sockets] = useState();\n\n  function connectToConversationSockets(conversations) {\n    if (\n      !window.CONVERSATION_SOCKET_CONNECTION &&\n      Array.isArray(conversations) &&\n      conversations.length\n    ) {\n      const conversation_sockets = conversations.map((conversation) => {\n          console.log(conversation);\n        const socket = io(\n          `${socket_endpoint}conversation-${conversation._id}`\n        );\n\n        /* socket.on(\"message\", (message) => {\n\n\n        }); */\n\n        return { id: conversation._id, socket };\n      });\n\n      window.CONVERSATION_SOCKET_CONNECTION = true;\n      return conversation_sockets;\n    }\n  }\n\n  useEffect(() => {\n    const conversation_sockets = connectToConversationSockets(conversations);\n    if (conversation_sockets) {\n      setconversation_sockets(conversation_sockets);\n    }\n    // eslint-disable-next-line\n  }, [conversations]);\n\n  function getSocket(conversation_id) {\n    return conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n  }\n\n  async function updateConversations() {\n    console.log(\"updateConversations -> user.id\", user.id);\n\n    const convos = await api.getconversations(user.id);\n    console.log(convos);\n    setconversations(convos);\n  }\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation._id &&\n          conversation_id !== openedconversation._id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation._id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        markRead,\n        user,\n        getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\n\nimport { ChatContext } from \"./ChatContext\";\nconst MessagingWindow = () => {\n  const { openedconversation, user } = useContext(ChatContext);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector(\".chat-screen\");\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\">\n            <h4>\n              {\"me and \" +\n                openedconversation.conversation\n                  .filter((name) => name !== user.username)\n                  .join(\",\")}\n            </h4>\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const {\n    getmessages,\n    openedconversation,\n    getSocket,\n    user,\n    markUndread,\n  } = useContext(ChatContext);\n\n  const socket = getSocket(openedconversation._id)[0].socket;\n  const [messages, setmessages] = useState();\n\n  useEffect(() => {\n    (async () => {\n      setmessages(await getmessages(openedconversation._id));\n      const list = document.querySelector(\".chat-screen\");\n      list.scrollTop = list.scrollHeight;\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    \n    socket.on(\"message\", async (message) => {\n      console.log(message);\n      if (message.conversation_id === openedconversation._id) {\n        setmessages(await getmessages(openedconversation._id));\n        const list = document.querySelector(\".chat-screen\");\n        list.scrollTop = list.scrollHeight;\n      }\n\n      markUndread(message.conversation_id);\n    });\n\n    \n    \n  }, [getmessages, openedconversation, socket, markUndread]);\n\n  let message = \"\";\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    message = message.trim();\n    socket.emit(\"message\", {\n      message,\n      sender: user.username,\n      sender_id: user.id,\n      conversation_id: openedconversation._id,\n      date: new Date(),\n    });\n    const messageInput = document.querySelector(\".message-input textarea\");\n    setTimeout(() => (messageInput.value = \"\"));\n    messageInput.focus();\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {messages &&\n          messages.length &&\n          messages.map((message, i) => {\n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n              />\n            );\n          })}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== \"\") {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = \"message\",\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === \"message\") {\n    return (\n      <div\n        className={group ? \"message group-message\" : \"message\"}\n        id={user.username === sender_name ? \"sent-message\" : \"message\"}\n      >\n        <h1 id={group ? \"group-sender\" : \"\"}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === \"badge\") {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  var strTime = hours + \":\" + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useEffect, useContext } from \"react\";\n\nimport MessagingWindow from \"./MessagingWindow\";\n//context\n\nimport { ChatContext, ChatContextProvider } from \"./ChatContext\";\n\n// Assets\nimport logo from \"./assets/img/logo.png\";\n\n// style\nimport \"./scss/chat-page.css\";\nimport { GlobalContext } from \"./GloablContext\";\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  return (\n    <div className=\"menu\">\n      <header>\n        <img src={logo} alt=\"logo\" />\n        <h2>Chat</h2>\n      </header>\n\n      <ConversationList />\n      <Options />\n    </div>\n  );\n};\n\nconst ConversationList = () => {\n  const { user } = useContext(GlobalContext);\n  const { conversations, updateConversations } = useContext(ChatContext);\n  useEffect(() => {\n    console.log(\"this is a req\", user);\n    user.id && updateConversations();\n    // eslint-disable-next-line\n  }, [user]);\n\n  if (conversations) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation } = useContext(ChatContext);\n  \n  const indicator =\n    conversation.unread &&\n    !(conversation._id === openedconversation._id)\n      ? \"7px solid rgb(143, 255, 143)\"\n      : \"\";\n\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={() => {\n          setOpenedconversation({ ...conversation, group: false });\n        }}\n        className=\"conversation\"\n        id={\n          conversation._id === openedconversation._id\n            ? \"opened-conversation\"\n            : \"\"\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>\n            {conversation.conversation_name\n              ? conversation.conversation_name.filter(\n                  (name) => name !== user.name\n                )\n              : conversation.conversation.join(\", \")}\n          </h4>\n        </div>\n      </div>\n    );\n  } else {\n    let conversation_name = \"group\";\n    if (typeof conversation.conversation_name === \"string\") {\n      conversation_name = conversation.conversation_name.join(\",\");\n    }\n    conversation_name = conversation.conversation_name.join(\", \");\n    return (\n      <div\n        onClick={() => {\n          setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation._id === openedconversation._id\n            ? \"opened-conversation\"\n            : \"\"\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst Options = () => {\n  return (\n    <div className=\"menu-options\">\n      <div className=\"option\">\n        <img\n          src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n          alt=\"\"\n        />\n        <span>start chat</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext, useEffect } from \"react\";\n// components\n\nimport axios from \"axios\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext, GlobalContextProvider } from \"./GloablContext\";\nconst App = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  // return authentication ? <ChatPage /> : <Login />;\n\n  useEffect(() => {\n    let endpoint =\n      window.location.protocol + \"//\" + window.location.hostname + \":8000\";\n\n    if (window.location.hostname === \"chatappinprogress.herokuapp.com\") {\n      endpoint = \"https://chatappinprogress.herokuapp.com/\";\n    }\n    console.log(endpoint);\n    axios\n      .get(endpoint + \"/api/authenticate\" + window.location.search)\n      .then((d) => {\n        console.log(d.data);\n        // setuser({ id: d.data.id, username: d.data.username });\n        Authenticate(d.data.username, d.data.id);\n      });\n  }, []);\n\n  return <ChatPage />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {  GlobalContextProvider } from \"./components/GloablContext\";\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}