{"version":3,"sources":["components/api.js","components/GloablContext.jsx","components/Login.jsx","components/ChatContext.jsx","components/MessagingWindow.jsx","components/ChatPage.jsx","components/App.jsx","serviceWorker.js","index.js","components/assets/img/logo.png"],"names":["endpoint","window","location","href","api","getconversations","userid","a","point","axios","post","result","data","getmessages","conversation_id","authenticate","username","password","GlobalContext","createContext","GlobalContextProvider","children","useState","authentication","setAuthentication","name","user","setuser","userdata","localStorage","setItem","setTimeout","Provider","value","Authenticate","Login","useContext","useEffect","getItem","onchange","e","target","id","onsubmit","preventDefault","className","action","onSubmit","onChange","type","placeholder","required","socket_endpoint","ChatContext","ChatContextProvider","openedconversation","setOpenedconversation","conversations","setconversations","conversation_sockets","setconversation_sockets","convos","markUndread","CONVERSATION_SOCKET_CONNECTION","Array","isArray","length","map","conversation","socket","io","on","message","connectToConversationSockets","markRead","getSocket","filter","conversation_socket","updateConversations","Messages","messages","setmessages","list","document","querySelector","scrollTop","scrollHeight","removeAllListeners","sendmessage","trim","emit","sender","sender_id","date","Date","messageInput","focus","i","key","text","sender_name","group","onKeyDown","shiftKey","keyCode","onClick","src","alt","Message","hours","getHours","minutes","getMinutes","ampm","formatAMPM","MessagingWindow","changegroupname","setchangegroupname","Object","keys","ChangeName","groupname","setgroupname","dismiss","addEventListener","removeEventListener","conversation_name","join","newname","Menu","logo","ConversationList","Conversation","indicator","unread","style","borderRight","Options","ChatPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.7e493f5b.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nconst endpoint = window.location.href === \"http://localhost:3000/\"\n    ? \"http://localhost:8000/api\"\n    : window.location.href+'api';\n\nconst api = {\n\n    getconversations: async (userid) => {\n\n        const point = endpoint + '/conversations';\n\n        const result = await axios.post(point, {\n            userid\n        });\n\n        return result.data;\n    },\n\n    getmessages: async (conversation_id) => {\n        const point = endpoint + '/messages';\n        const result = await axios.post(point, {\n            conversation_id\n        });\n\n        return result.data;\n    },\n    authenticate: async (username, password) => {\n\n        const result = await axios.post(endpoint + \"/authenticate\", {\n            username,\n            password,\n        });\n        return result.data;\n    }\n}\n\nexport default api;","import React, { createContext, useState } from \"react\";\nimport api from \"./api\";\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [authentication, setAuthentication] = useState(false);\n  const [user, setuser] = useState({ userid: 0, name: \"\" });\n\n  async function Authenticate(username, password) {\n    const userdata = await api.authenticate(username, password);\n    if (userdata) {\n      localStorage.setItem(\"username\", username);\n      localStorage.setItem(\"password\", password);\n      setuser({ userid: userdata, name: username });\n      setTimeout(() => setAuthentication(true));\n    } else {\n      setAuthentication(false);\n    }\n\n    return authentication;\n  }\n  return (\n    <GlobalContext.Provider\n      value={{\n        authentication,\n        Authenticate,\n        user,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\n\n// contexts\nimport { GlobalContext } from \"./GloablContext\";\n\n//styles\nimport \"./scss/Login.css\";\nconst Login = () => {\n  const { Authenticate } = useContext(GlobalContext);\n  let username = \"\",\n    password = \"\";\n\n  useEffect(() => {\n    const username = localStorage.getItem(\"username\");\n    const password = localStorage.getItem(\"password\");\n\n    if (username && password) {\n      Authenticate(username, password);\n    }\n  });\n\n  onchange = (e) => {\n    if (e.target.id === \"username\") username = e.target.value;\n    if (e.target.id === \"password\") password = e.target.value;\n  };\n\n  onsubmit = async (e) => {\n    e.preventDefault();\n    Authenticate(username, password);\n  };\n  return (\n    <div className=\"login-page\">\n      <form action=\"post\" onSubmit={onsubmit}>\n        <div className=\"username\">\n          <input\n            onChange={onchange}\n            id=\"username\"\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            required\n          />\n        </div>\n        <div className=\"password\">\n          <input\n            onChange={onchange}\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div>\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useEffect, createContext, useContext, useState } from \"react\";\n\nimport api from \"./api\";\nimport io from \"socket.io-client\";\n\n//global context\nimport { GlobalContext } from \"./GloablContext\";\n\nconst socket_endpoint =\n  window.location.href === \"http://localhost:3000/\"\n    ? \"http://localhost:8000/\"\n    : window.location.href;\n\n\nexport const ChatContext = createContext();\n\nexport const ChatContextProvider = ({ children }) => {\n  //global context\n  const { user } = useContext(GlobalContext);\n\n  const [openedconversation, setOpenedconversation] = useState({});\n  const [conversations, setconversations] = useState([]);\n  const [conversation_sockets, setconversation_sockets] = useState();\n\n  function connectToConversationSockets(conversations) {\n    if (\n      !window.CONVERSATION_SOCKET_CONNECTION &&\n      Array.isArray(conversations) &&\n      conversations.length\n    ) {\n      const conversation_sockets = conversations.map((conversation) => {\n        const socket = io(\n          `${socket_endpoint}conversation-${conversation.conversation_id}`\n        );\n\n        socket.on(\"message\", (message) => {\n          if (openedconversation.conversation_id !== message.conversation_id)\n            markUndread(message.conversation_id);\n        });\n\n        return { id: conversation.conversation_id, socket };\n      });\n\n      window.CONVERSATION_SOCKET_CONNECTION = true;\n      return conversation_sockets;\n    }\n  }\n\n  useEffect(() => {\n                    const conversation_sockets = connectToConversationSockets(\n                      conversations\n                    );\n                    if (conversation_sockets) {\n                      setconversation_sockets(conversation_sockets);\n                    }\n                    // eslint-disable-next-line\n                  }, [conversations]);\n\n  function getSocket(conversation_id) {\n    return conversation_sockets.filter((conversation_socket) => {\n      return conversation_socket.id === conversation_id;\n    });\n  }\n\n  async function updateConversations() {\n    const convos = await api.getconversations(user.userid);\n    setconversations(convos);\n  }\n\n  function markUndread(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (\n          conversation_id === conversation.conversation_id &&\n          conversation_id !== openedconversation.conversation_id\n        )\n          conversation.unread = true;\n        return conversation;\n      })\n    ); */\n  }\n  function markRead(conversation_id) {\n    /* setconversations(\n      conversations.map((conversation) => {\n        if (conversation_id === conversation.conversation_id)\n          conversation.unread = false;\n        return conversation;\n      })\n    ); */\n  }\n\n  return (\n    <ChatContext.Provider\n      value={{\n        getmessages: api.getmessages,\n        markUndread,\n        markRead,\n        user,\n        getSocket,\n        openedconversation,\n        setOpenedconversation,\n        updateConversations,\n        conversations,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\n\nimport { ChatContext } from \"./ChatContext\";\nconst MessagingWindow = () => {\n  const { openedconversation, user } = useContext(ChatContext);\n  const [changegroupname, setchangegroupname] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(openedconversation).length) {\n      const list = document.querySelector(\".chat-screen\");\n      list.scrollTop = list.scrollHeight;\n    }\n  }, [openedconversation]);\n\n  if (Object.keys(openedconversation).length) {\n    function ChangeName({ groupname, setgroupname, setchangegroupname }) {\n      let newname = \"\";\n\n      const onchange = (e) => {\n        newname = e.target.value;\n      };\n      useEffect(() => {\n        const dismiss = (e) => {\n          if (e.keyCode === 27) setchangegroupname(false);\n        };\n\n        document.addEventListener(\"keydown\", dismiss);\n\n        return () => {\n          document.removeEventListener(\"keydown\", dismiss);\n        };\n      });\n\n      return (\n        <form onSubmit={setgroupname} className=\"group-name-input\">\n          <input\n            onChange={onchange}\n            id=\"group-name-changer\"\n            type=\"text\"\n            value={groupname}\n          />\n        </form>\n      );\n    }\n\n    const conversation_name = `me and ${openedconversation.conversation_name\n      .filter((name) => name !== user.name)\n      .join(\",\")}`;\n\n    const setconversation_name = (newname) => {};\n\n    return (\n      <div className=\"chat-screen\">\n        <div className=\"contact-header\">\n          <img\n            src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n            alt=\"profile\"\n          />\n          <div className=\"about\" onClick={() => setchangegroupname(true)}>\n            {!changegroupname ? (\n              <h4>{conversation_name}</h4>\n            ) : (\n              <ChangeName\n                groupname={conversation_name}\n                setgroupname={setconversation_name}\n                {...{ setchangegroupname }}\n              />\n            )}\n            <img\n              src=\"https://img.icons8.com/android/24/000000/info.png\"\n              alt=\"\"\n            />\n          </div>\n        </div>\n\n        <Messages />\n      </div>\n    );\n  }\n  return (\n    <div className=\"start-chat\">\n      <img src=\"https://img.icons8.com/nolan/256/speech-bubble.png\" alt=\"\" />\n      <h2>Chat</h2>\n    </div>\n  );\n};\n\nconst Messages = () => {\n  const {\n    getmessages,\n    openedconversation,\n    getSocket,\n    user,\n    markUndread,\n  } = useContext(ChatContext);\n\n  const socket = getSocket(openedconversation.conversation_id)[0].socket;\n  const [messages, setmessages] = useState();\n\n  useEffect(() => {\n    (async () => {\n      setmessages(await getmessages(openedconversation.conversation_id));\n      const list = document.querySelector(\".chat-screen\");\n      list.scrollTop = list.scrollHeight;\n    })();\n  }, [openedconversation, getmessages]);\n\n  useEffect(() => {\n    socket.removeAllListeners(\"message\");\n    socket.on(\"message\", async (message) => {\n      if (message.conversation_id === openedconversation.conversation_id) {\n        setmessages(await getmessages(openedconversation.conversation_id));\n        const list = document.querySelector(\".chat-screen\");\n        list.scrollTop = list.scrollHeight;\n      }\n\n      markUndread(message.conversation_id);\n    });\n\n    return () => {\n      socket.removeAllListeners(\"message\");\n      socket.on(\"message\", (message) => {\n        markUndread(message.conversation_id);\n      });\n    };\n  }, [getmessages, openedconversation, socket, markUndread]);\n\n  let message = \"\";\n\n  const onchange = (e) => {\n    message = e.target.value;\n  };\n\n  const sendmessage = () => {\n    message = message.trim();\n    socket.emit(\"message\", {\n      message,\n      sender: user.name,\n      sender_id: user.userid,\n      conversation_id: openedconversation.conversation_id,\n      date: new Date(),\n    });\n    const messageInput = document.querySelector(\".message-input textarea\");\n    setTimeout(() => (messageInput.value = \"\"));\n    messageInput.focus();\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"messages-view\">\n        {messages &&\n          messages.map((message, i) => {\n            return (\n              <Message\n                key={i}\n                {...message}\n                text={message.message}\n                sender_name={message.sender}\n                group={openedconversation.group}\n              />\n            );\n          })}\n      </div>\n\n      <div className=\"message-input\">\n        <textarea\n          onChange={onchange}\n          onKeyDown={(e) => {\n            if (!e.shiftKey && e.keyCode === 13 && message.trim() !== \"\") {\n              sendmessage();\n            }\n          }}\n          type=\"text\"\n          placeholder=\"type something...\"\n        />\n        <div onClick={sendmessage} className=\"send-btn\">\n          <img\n            src=\"https://img.icons8.com/material-outlined/64/000000/filled-sent.png\"\n            alt=\"semdbtn\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Message = ({\n  type = \"message\",\n  text,\n  sender_name,\n  sender_id,\n  date,\n  group,\n}) => {\n  const { user } = useContext(ChatContext);\n\n  if (type === \"message\") {\n    return (\n      <div\n        className={group ? \"message group-message\" : \"message\"}\n        id={user.userid === sender_id ? \"sent-message\" : \"message\"}\n      >\n        <h1 id={group ? \"group-sender\" : \"\"}>{sender_name}</h1>\n        <span>{text}</span>\n        <span id=\"date-time\">{formatAMPM(new Date(date))}</span>\n      </div>\n    );\n  } else if (type === \"badge\") {\n    return (\n      <div className=\"badge\">\n        <span>{text}</span>\n      </div>\n    );\n  }\n};\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  var strTime = hours + \":\" + minutes + ampm;\n  return strTime;\n}\nexport default MessagingWindow;\n","import React, { useState, useEffect, useContext } from \"react\";\n\nimport MessagingWindow from \"./MessagingWindow\";\n//context\nimport { ChatContext, ChatContextProvider } from \"./ChatContext\";\n// Assets\nimport logo from \"./assets/img/logo.png\";\n\n// style\nimport \"./scss/chat-page.css\";\nimport { GlobalContext } from \"./GloablContext\";\nconst ChatPage = () => {\n  return (\n    <ChatContextProvider>\n      <div className=\"chat-page\">\n        <Menu />\n        <MessagingWindow />\n      </div>\n    </ChatContextProvider>\n  );\n};\nconst Menu = () => {\n  return (\n    <div className=\"menu\">\n      <header>\n        <img src={logo} alt=\"logo\" />\n        <h2>Chat</h2>\n      </header>\n\n      <ConversationList />\n      <Options />\n    </div>\n  );\n};\n\nconst ConversationList = () => {\n  const { conversations, updateConversations } = useContext(ChatContext);\n\n\n\n  \n  useEffect(() => {\n    updateConversations();\n    // eslint-disable-next-line\n  }, []);\n\n  if (conversations) {\n    return (\n      <div className=\"conversation-list\">\n        {conversations.map((conversation, i) => (\n          <Conversation key={i} conversation={conversation} />\n        ))}\n      </div>\n    );\n  } else {\n    return <div className=\"empty-conversation-list\"></div>;\n  }\n};\n\nconst Conversation = ({ conversation }) => {\n  const { user } = useContext(GlobalContext);\n  const { openedconversation, setOpenedconversation, markRead } = useContext(\n    ChatContext\n  );\n\n  const indicator =\n    conversation.unread &&\n    !(conversation.conversation_id === openedconversation.conversation_id)\n      ? \"7px solid rgb(143, 255, 143)\"\n      : \"\";\n\n  if (conversation.conversation.length === 2) {\n    return (\n      <div\n        style={{ borderRight: indicator }}\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: false });\n        }}\n        className=\"conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? \"opened-conversation\"\n            : \"\"\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-5.png\"\n          alt=\"profile\"\n        />\n        <div className=\"about\">\n          <h4>\n            {conversation.conversation_name.filter(\n              (name) => name !== user.name\n            )}\n          </h4>\n        </div>\n      </div>\n    );\n  } else {\n    let conversation_name = \"group\";\n    if (typeof conversation.conversation_name === \"string\") {\n      conversation_name = conversation.conversation_name;\n    }\n    conversation_name = conversation.conversation_name.join(\", \");\n\n    \n    \n\n    return (\n      <div\n        onClick={() => {\n          markRead(conversation.conversation_id);\n          setOpenedconversation({ ...conversation, group: true });\n        }}\n        className=\"conversation group-conversation\"\n        id={\n          conversation.conversation_id === openedconversation.conversation_id\n            ? \"opened-conversation\"\n            : \"\"\n        }\n      >\n        <img\n          src=\"https://img.icons8.com/color/48/000000/conference-skin-type-7.png\"\n          alt=\"group\"\n        />\n        <div className=\"about\">\n          <h4>{conversation_name}</h4>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst Options = () => {\n  return (\n    <div className=\"menu-options\">\n      <div className=\"option\">\n        <img\n          src=\"https://img.icons8.com/cotton/64/000000/add-to-chat.png\"\n          alt=\"\"\n        />\n        <span>start chat</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\n\n// components\nimport Login from \"./Login\";\n\nimport ChatPage from \"./ChatPage\";\n//Global context\nimport { GlobalContext } from \"./GloablContext\";\nconst App = () => {\n  const { authentication } = useContext(GlobalContext);\n  return authentication ? <ChatPage /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Global styling\nimport './index.css';\n\n// main app\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//global context\nimport { GlobalContextProvider } from './components/GloablContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalContextProvider>\n      <App />\n    </GlobalContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b68e57d.png\";"],"sourceRoot":""}